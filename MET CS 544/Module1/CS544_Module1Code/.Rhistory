all(x==0)
all(x[2]==4)
seq(x,2)
seq(0,x,2)
seq(0,x,4)
seq(0,x,1)
seq(1,x,2)
s
seq_len(1,x,2)
seq_len(0,x,2)
qi<- function(x){for(i in 1:5){
a<- 1; b <- 1
print(a)
c <- a +b
a <- b
b <- c
}
}
qi(6)
a<- 1; b <- 1
qi<- function(x){for(i in 1:5){
print(a)
c <- a +b
a <- b
b <- c
}
}
qi(6)
qi<- function(x){for(i in Inf){
print(a)
c <- a +b
a <- b
b <- c
}
}
qi(6)
x <- c(2,4,8,16,7,14)
10%%5
10%%6
for( i in x) {
all(x[i]%%x[i-1]==0)
}
for( i in x) {
print(all(x[i]%%x[i-1]==0))
}
a <- 2
for( i in x) {
print(all(i[a]%%i[a-1]==0))
}
all(X[a]%%x[a-1]==0)
all(x[a]%%x[a-1]==0)
print(x[i])
for( i in length(x)){
print(x[i])
}
x[2]%%x[1]
my.max <- function (x) {
result <- -Inf
for (number in x) {
if (number > result) {
result <- number
}
}
return (result)
}
my.max(c(100, 50, 200, 80))
my.reverse <- function (x) {
return (x[length(x):1])
}
my.reverse(c(10, 50, 100))
my.reverse(20:30)
c(20:30)
my.reverse(c(10, 50, 100))
my.reverse(20:30)
my.reverse <- function (x) {
x[length(x):1]
}
my.reverse(c(10, 50, 100))
my.reverse(20:30)
all(x%%)
seq(x,length(X))
seq(x,length(X))
seq(1,x,length(x))
seq(0,x,2)
seq(0,length(x),2)
x[seq(0,length(x),2)]
x[seq(1,length(x),2)]
all(x[seq(0,length(x),2)]%%x[seq(1,length(x),2)]==0)
x <- c(2,4,8,16,7,14)
all(x[seq(0,length(x),2)]%%x[seq(1,length(x),2)]==0)
x <- c(2,4,8,16,8,14)
all(x[seq(0,length(x),2)]%%x[seq(1,length(x),2)]==0)
x <- c(2,4,8,16,7,14)
all(x[seq(0,length(x),2)]%%x[seq(1,length(x),2)]==0)
y <- (2,7,8,10,12,18)
target <- 11
y <- (2,7,8,10,12,18)
where.max(abs(target - y))
abs(target- y)
y <- (2,7,8,10,12,18)
target <- 11
abs(target- y)
abs(target - y)
abs(target - y[1])
y <- c(2,7,8,10,12,18)
abs(target - y)
max(abs(target - y))
which.max(abs(target - y))
y[which.max(abs(target - y))]
max(abs(target - y))
y[which.max(abs(target - y))]
max.col(abs(target - y))
y[max(abs(target - y))]
abs(target - y)
pmax(y)
pmax.int(y)
max(y)
x[seq(0,length(x),2)]
x <- c(2,4,8,16,7,14)
all(x[seq(0,length(x),2)]%%x[seq(1,length(x),2)]==0)
y[which.max(target-y)]
target-y
y <- c(2,7,8,10,12,18,22)
target <- 11
target-y
y[which.max(target-y)]
y[which.max(abs(target-y))]
if (!is.element("stringr", installed.packages()[,"Package"]))
install.packages("stringr", repos="http://cran.us.r-project.org",
dependencies = TRUE)
library(stringr)
# Join - str_c
str_c(c(1,2))
str_c(c("a", "b"), c(1,2), c("c", "d"))
str_c(c("a", "b"), c(1,2), c("c", "d"), sep = "-")
str_c("Letter: ", letters)
str_c("Letter", letters, sep = ": ")
str_c(LETTERS, " is for", "...")
str_c(LETTERS, c(" is for", " for"), "...")
str_c(letters[-26], " is before ", letters[-1])
str_c(c(1,2), collapse = "")
str_c(c("a", "b"), c(1,2), c("c", "d"), collapse=":")
str_c(c("a", "b"), c(1,2), c("c", "d"), sep = "-", collapse=":")
str_c(letters, collapse = "")
str_c(letters, collapse = ":")
str_flatten(letters)
str_flatten(letters, collapse = ":")
# Missing inputs give missing outputs
str_c(c("a", NA, "b"), "-d")
str_length(c("a", "b", "c"))
str_length(c("a1", "b23", "c456"))
str_length(c("a1", NA, "c456"))
which.max(str_length(c("a", "b", "c")))
str_length(letters)
s <- c("United States",'HOME')
str_length(s)
str_sub(s, 1, 6)
str_sub(s, 1, 6)
str_sub(s, end = 6)
str_length(s)
str_sub(s, 1, 6)
str_sub(s, end = 6)
str_sub(s, start = 2, end = 5)
s <- c("United States",'HOME')
str_length(s)
str_sub(s, 1, 6)
str_sub(s, end = 6)
str_sub(s, start = 2, end = 5)
str_sub(s, start = 1, end = 2)
str_sub(s, 8, 13)
str_sub(s, 8)
str_sub(s, -2)
str_sub(s, c(1, 8), c(6, 13))
str_sub(s, start = c(1, 8), end = c(6, 13))
str_sub(s, c(1, 8))
str_sub(s, end = c(6, 13))
str_sub(s, end = 6)
str_sub(s, -1)
str_sub(s, -6)
str_sub(s, -10, -8)
str_sub(s, end = -6)
x <- "CLAP"
str_sub(x, 1, 1) <- "F"; x
str_sub(x, -1, -1) <- "T"; x
str_sub(x, 2, -2) <- "OO"; x
str_sub(x, 2, -2) <- ""; x
x <- c("a1", "b2", "c3")
str_dup(x, 2)
str_dup(x, 1:3)
str_c("a", str_dup("ha", 0:4))
# Trimming
x <- "    How     are \n you?\t"
x
str_trim(x)
str_trim(x, side="left")
str_trim(x, side="right")
x <- "    How     are \n you?\t"
str_squish(x)
x <- "\t   How\t\t  \t\tare\tyou?"
str_squish(x)
str_trim("  String with trailing and leading white space\t")
str_trim("\n\nString with trailing and leading white space\n\n", side = "right")
str_pad("cs544", 10)
str_pad("cs544", 10, pad = "_")
rbind(
str_pad("cs544", 10, "left"),
str_pad("cs544", 10, "right"),
str_pad("cs544", 10, "both")
)
str_view(x, "^[aeiou]|[aeiou]$", match = TRUE)
str_pad(c("a", "abc", "abcdef"), 5)
str_pad("a", c(2, 4, 6))
str_pad("cs544", 10, pad = c("_", "#"))
str_pad(c("cs544", "cs555"), 10, pad = c("_", "#"))
# Longer strings are returned unchanged
str_pad("cs544", 3)
x <- "Foundations of Data Analytics with R";x
str_length(x)
rbind(
str_trunc(x, 25, "left"),
str_trunc(x, 25, "right"),
str_trunc(x, 25, "center")
)
head(fruit)
tail(fruit)
length(fruit)
fruit[str_detect(fruit, "ap")]
fruit[str_detect(fruit, "^ap")]
fruit[str_detect(fruit, "it$")]
fruit[str_detect(fruit, "[dvw]")]
fruit[str_detect(fruit, "[:space:]")]
data <- c(
"123 Main St",
"6175551234",
"978-356-1234",
"Work: 617-423-4567; Home: 508.555.3589; Cell: 555 777 3456"
)
phone <- "([2-9][0-9]{2})([- .]?)([0-9]{3})([- .])?([0-9]{4})"
x <- c("what", "video", "cross", "extra", "deal", "authority")
y <-  c('a','e','i','o','u')
str_locate(x,y)
# Which strings contain phone numbers?
str_detect(data, phone)
data[str_detect(data, phone)]
str_subset(data, phone)
# Where in the string is the phone number located?
str_locate(data, phone)
skippo <- function(x){
a <- 1; b <-1; c <- 1 ; i <- 0
while(i < x){
print(a)
d <- b + c
a <- b
b <- c
i <- i+1
}
}
skippo(10)
a <- 1; b <- 1; c <- 1 ; i <- 0
skippo <- function(x){
while(i < x){
print(a)
d <- b + c
a <- b
b <- c
i <- i+1
}
}
skippo(10)
a = 1; b = 1; c = 1 ; i = 0
a = 1; b = 1; c = 1 ; i = 0
skippo <- function(x){
while(i < x){
print(a)
d = b + c
a = b
b = c
i = i+1
}
}
skippo(10)
a = 1; b = 1 ; i = 0
a = 1; b = 1 ; i = 0
skippo <- function(x){
for( i in 1:x){
print(a)
c <- a+b
a <- b
b <- c
}
}
skippo(10)
a = 1; b = 1 ;c = 1; i = 0
a = 1; b = 1 ;c = 1; i = 0
skippo <- function(x){
for( i in 1:x){
print(a)
d <- b+c
a <- b
b <- c
c <- d
}
}
skippo(10)
a = 1; b = 1 ;c = 1; i = 0
skippo <- function(x){
for( i in 1:x){
print(a)
d <- a+b
a <- b
b <- c
c <- d
}
}
skippo(10)
Output <- as.numeric()
a <- 1; b <- 1 ;c <- 1; i <- 0
Output <- as.numeric()
skippo <- function(x){
for( i in 1:x){
Output[i]<- a
d <- a+b
a <- b
b <- c
c <- d
}
}
skippo(10)
Output
Output[i]<- a
skippo <- function(x){
for( i in 1:x){
Output[i] <- a
d <- a+b
a <- b
b <- c
c <- d
}
}
Output[1]
Output[1] <- 1
Output <- as.numeric(10)
skippo <- function(x){
for( i in 1:x){
Output[i-1] <- a
d <- a+b
a <- b
b <- c
c <- d
}
}
skippo(10)
Output
Output <- c()
skippo <- function(x){
for( i in 1:x){
Output[i-1] <- a
d <- a+b
a <- b
b <- c
c <- d
}
}
skippo(10)
Output
Output <- array()
skippo <- function(x){
for( i in 1:x){
Output[i-1] <- a
d <- a+b
a <- b
b <- c
c <- d
}
print(Output)
}
skippo(10)
Output <- array()
skippo <- function(x){
for( i in 1:x){
Output[i] <- a
d <- a+b
a <- b
b <- c
c <- d
}
print(Output)
}
skippo(10)
library(tidyverse)
file <- "https://people.bu.edu/kalathur/datasets/words.txt"
speech <- scan(file, what=character())
library(tidyverse)
file <- "https://people.bu.edu/kalathur/datasets/words.txt"
speech <- scan(file, what=character())
str_length(speech)
str_length(speech) ==15
all(str_length(speech) ==15)
which(str_length(speech) == 15)
speech[which(str_length(speech) == 15)]
str_detect(speech, "here")
str_detect(speech, "[here]")
speech[993]
str_detect(speech, "here")
str_detect(speech, "here") == "TRUE"
which(str_detect(speech, "here") == "TRUE")
speech[which(str_detect(speech, "here") == "TRUE")]
skills <- c("Java", "Python", "R", "Scala", "Spark")
str_extract(skills, "^S")
str_extract(skills, "^S(.)+")
str_extract(skills, "a$")
str_extract(skills, "(.)+a$")
str_extract(skills, "^S(.)+a$")
str_extract(skills, "(P|R)(.)+")
skills <- c("Java", "Python", "R", "Scala", "Spark")
str_extract(skills, "(.)+a(.)+")
speech[which(str_detect(speech, "(.)here") == "TRUE")]
speech[which(str_detect(speech, "(.)here(.)") == "TRUE")]
data <- c(590, 355, 530, 890, 385, 545, 695, 575, 195, 275, 125, 310, 290, 510, 425, 130, 390, 620, 585, 215)
sales <- matrix(data, ncol = 5, byrow = TRUE)
data <- c(590, 355, 530, 890, 385, 545, 695, 575, 195, 275, 125, 310, 290, 510, 425, 130, 390, 620, 585, 215)
sales <- matrix(data, ncol = 5, byrow = TRUE)
sales
max.col(sales)
max.row(sales)
sales
max(sales)
max.col(sales[0,1])
max.col(sales[0,])
apply(sales,2,max)
apply(sales,1,max)
sales
605 - apply(sales,1,max)
abs(605 - apply(sales,1,max))
apply(sales,1,max)
abs(605 - apply(sales,1,max))
data <- c(590, 355, 530, 890, 385, 545, 695, 575, 195, 275, 125, 310, 290, 510, 425, 130, 390, 620, 585, 215)
sales <- matrix(data, ncol = 5, byrow = TRUE)
sales
apply(sales,1,max)
apply(sales,2,max)
abs(605 - apply(sales,2,max))
week <- apply(sales,2,max)
week
store <- apply(sales,1,max)
store
Target <- abs(605 - apply(sales,2,max))
Target
str_extract(speech,'a')
str_extract(speech,'^')
str_extract(skills, "^S")
str_extract(skills, "^S(.)+")
str_extract(skills, "a$")
str_extract(skills, "(.)+a$")
str_extract(skills, "^S(.)+a$")
str_extract(skills, "(P|R)(.)+")
str_sub(s, end = 1)
s <- c("United States",'HOME')
str_sub(s, end = 1)
str_sub(s, -1)
my_tibble_c <- tibble(
　words <- speech
　FW <- str_sub(speech, end = 1)
EW <- str_sub(speech, start = -1)
len <- str_length(speech)
)
my_tibble_c <- tibble(
　words <- speech
　FW <- str_sub(speech, end = 1)
EW <- str_sub(speech, start = -1)
len <- str_length(speech)
)
my_tibble_c <- tibble(
　words <- speech
　FW <- str_sub(speech, end = 1)
EW <- str_sub(speech, start = -1)
len <- str_length(speech))
tibble <- tibble(
words <- speech
FW <- str_sub(speech, end = 1)
EW <- str_sub(speech, start = -1)
len <- str_length(speech)
)
str_sub(s, 1, 6)
my_tibble_c <- tibble(
　words <- speech
　FW <- str_sub(speech, end=1)
EW <- str_sub(speech, start = -1)
len <- str_length(speech))
str_length(speech)
tibble <- tibble(
words <- speech ,
FW <- str_sub(speech, end = 1),
EW <- str_sub(speech, start = -1),
len <- str_length(speech)
)
table(tibble$FW)
data <- c(590, 355, 530, 890, 385, 545, 695, 575, 195, 275, 125, 310, 290, 510, 425, 130, 390, 620, 585, 215)
sales <- matrix(data, ncol = 5, byrow = TRUE)
sales
week <- apply(sales,2,max)
week
store <- apply(sales,1,max)
store
max.row(sales)
Target <- abs(605 - apply(sales,2,max))
Target
target <- 605
Target <- abs(target - apply(sales,2,max))
Target
paste("Week 1 maximum sales of", week[1], "by Store",,"and trail target",target,"by",Target[1])
paste("Week 1 maximum sales of", week[1], "by Store 1 and trail target",target,"by",Target[1])
