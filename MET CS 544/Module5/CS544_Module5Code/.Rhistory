plot_ly(iris, y = ~Sepal.Length, type="box", name = 'SepalLength') %>%
add_trace(y = ~Sepal.Width, name = 'SepalWidth') %>%
add_trace(y = ~Petal.Length, name = 'PetalLength') %>%
add_trace(y = ~Petal.Width, name = 'PetalWidth') %>%
layout(yaxis = list(title = 'Measure')) -> p
p
p <- plot_ly(iris, x = ~Sepal.Width, y = ~Sepal.Length)
p
p <- add_markers(p, color = ~Petal.Length, size = ~Petal.Length)
p
p <- add_markers(p, symbol = ~Species)
p
if (!is.element("plotly", installed.packages()[,"Package"]))
install.packages("plotly", repos="http://cran.us.r-project.org", dependencies = TRUE)
library(plotly)
head(iris)
install.packages("plotly", repos="http://cran.us.r-project.org", dependencies = TRUE)
install.packages("plotly", repos = "http://cran.us.r-project.org", dependencies = TRUE)
install.packages("plotly", repos = "http://cran.us.r-project.org", dependencies = TRUE)
install.packages("plotly", repos = "http://cran.us.r-project.org", dependencies = TRUE)
install.packages("plotly")
install.packages("plotly")
library(plotly)
head(iris)
p <- plot_ly(iris, x = ~Sepal.Length, type="box", name = 'SL')
p
p <- add_trace(p, x = ~Sepal.Width, name = 'SW')
p
p <- add_trace(p, x = ~Petal.Length, name = 'PL')
library(sampling)
library(UsingR)
N <- nrow(alltime.movies)
n <- 5
set.seed(489)
s <- srswr(n, N)
s[s!=0]
rows <- (1:N)[s!=0]
rows
rows <- rep(rows, s[s != 0])
rows
alltime.movies[rows, ]
set.seed(489)
s <- srswr(n, N)
s[s!=0]
rows <- (1:N)[s!=0]
rows
rownames(alltime.movies)
strtrim(rownames(alltime.movies))
?strtrim
?sub
sub(" +$", "", rownames(alltime.movies))
titles <- sub(" +$", "", rownames(alltime.movies))
paste("I would watch", titles[rows] )
paste("I would watch", titles[rows],  s[s!=0], "times")
set.seed(489)
s <- srswr(n, N)
counts <- s[s!=0]
counts
rows <- (1:N)[s!=0]
rows
for (i in 1:length(rows)) {
cat("I would watch ", titles[rows[i]], counts[i], "time", "\n")
}
for (i in 1:length(rows)) {
cat("I would watch", titles[rows[i]], counts[i], "time", "\n")
}
for (i in 1:length(rows)) {
cat("I would watch", titles[rows[i]], counts[i],
ifelse(counts[i] == 1, "time", "times"), "\n")
}
set.seed(489)
s <- srswr(n, N)
counts <- s[s!=0]
counts
rows <- (1:N)[s!=0]
rows
for (i in 1:length(rows)) {
cat("I would watch", titles[rows[i]], counts[i],
ifelse(counts[i] == 1, "time", "times"), "\n")
}
set.seed(489)
s <- srswor(n, N)
counts <- s[s!=0]
counts
rows <- (1:N)[s!=0]
rows
for (i in 1:length(rows)) {
cat("I would watch", titles[rows[i]], counts[i],
ifelse(counts[i] == 1, "time", "times"), "\n")
}
set.seed(489)
k <- ceiling(N/n)
r <- sample(k, 1)
r
rows <- seq(r, by = k, length = n)
rows
alltime.movies[rows, ]
for (i in 1:length(rows)) {
cat("I would watch", titles[rows[i]], "\n")
}
set.seed(489)
pik <- inclusionprobabilities(alltime.movies$Gross, n)
s <- UPsystematic(pik)
rows <- (1:N)[s!=0]
for (i in 1:length(rows)) {
cat("I would watch", titles[rows[i]], "\n")
}
set.seed(489)
t <- sort(table(alltime.movies$Release.Year), decreasing = T)[1:5]
top5years <- as.numeric(names(t))
top5years
df <- subset(alltime.movies, Release.Year %in% top5years)
df <- df[order(df$Release.Year), ]
df
st <- sampling::strata(df, stratanames = c("Release.Year"),
size = rep(1,5), method = "srswor",
description = FALSE)
rows <- st$ID_unit
df[rows,  c("Gross", "Release.Year")]
st <- sampling::strata(df, stratanames = c("Release.Year"),
size = rep(1,5), method = "srswor",
description = FALSE)
rows <- st$ID_unit
df[rows,  c("Gross", "Release.Year")]
for (i in 1:length(rows)) {
cat("I would watch", titles[rows[i]], "released in", alltime.movies$Release.Year[rows[i]], "\n")
}
set.seed(489)
t <- sort(table(alltime.movies$Release.Year), decreasing = T)[1:5]
top5years <- as.numeric(names(t))
top5years
df <- subset(alltime.movies, Release.Year %in% top5years)
df <- df[order(df$Release.Year), ]
st <- sampling::strata(df, stratanames = c("Release.Year"),
size = rep(1,5), method = "srswor",
description = FALSE)
rows <- st$ID_unit
for (i in 1:length(rows)) {
cat("I would watch", titles[rows[i]], "released in", alltime.movies$Release.Year[rows[i]], "\n")
}
set.seed(489)
t <- sort(table(alltime.movies$Release.Year), decreasing = T)[1:5]
top5years <- as.numeric(names(t))
top5years
df <- subset(alltime.movies, Release.Year %in% top5years)
df <- df[order(df$Release.Year), ]
st <- sampling::strata(df, stratanames = c("Release.Year"),
size = rep(1,5), method = "srswor",
description = FALSE)
rows <- st$ID_unit
for (i in 1:length(rows)) {
cat("I would watch", titles[rows[i]], "released in", alltime.movies$Release.Year[rows[i]], "\n")
}
set.seed(489)
t <- sort(table(alltime.movies$Release.Year), decreasing = T)[1:5]
top5years <- as.numeric(names(t))
top5years
df <- subset(alltime.movies, Release.Year %in% top5years)
df <- df[order(df$Release.Year), ]
st <- sampling::strata(df, stratanames = c("Release.Year"),
size = rep(1,5), method = "srswor",
description = FALSE)
rows <- st$ID_unit
for (i in 1:length(rows)) {
cat("I would watch", titles[rows[i]], "released in", alltime.movies$Release.Year[rows[i]], "\n")
}
top5years
rows
df[rows, ]
st
df_titles <- sub(" +$", "", rownames(df))
df[rows, ]
for (i in 1:length(rows)) {
cat("I would watch", df_titles[rows[i]], "released in", df$Release.Year[rows[i]], "\n")
}
set.seed(489)
t <- sort(table(alltime.movies$Release.Year), decreasing = T)[1:5]
top5years <- as.numeric(names(t))
top5years
df <- subset(alltime.movies, Release.Year %in% top5years)
df <- df[order(df$Release.Year), ]
st <- sampling::strata(df, stratanames = c("Release.Year"),
size = rep(1,5), method = "srswor",
description = FALSE)
rows <- st$ID_unit
df_titles <- sub(" +$", "", rownames(df))
df[rows, ]
for (i in 1:length(rows)) {
cat("I would watch", df_titles[rows[i]], "released in", df$Release.Year[rows[i]], "\n")
}
library(sampling)
set.seed(123)
section.ids <- rep(LETTERS[1:4], each = 25)
section.scores <- round(runif(100, 60, 80))
data <- data.frame(
Section = section.ids,
Score = section.scores)
LETTERS[1:4]
section.ids
View(data)
table(data$Section)
st.1 <- strata(data, stratanames = c("Section"),
size = rep(3, 4), method = "srswor",
description = TRUE)
st.1 <- sampling::strata(data, stratanames = c("Section"),
size = rep(3, 4), method = "srswor",
description = TRUE)
rep(3, 4)
st.1
st.sample1 <- getdata(data, st.1)
st.sample1
set.seed(123)
section.ids <- rep(LETTERS[1:4], c(10, 20, 30, 40))
section.scores <- round(runif(100, 60, 80))
data <- data.frame(
Section = section.ids,
Score = section.scores)
head(data)
table(data$Section)
freq <- table(data$Section)
freq
st.sizes <- 20 * freq / sum(freq)
st.sizes
st.2 <- sampling::strata(data, stratanames = c("Section"),
size = st.sizes, method = "srswor",
description = TRUE)
st.2
st.sample2 <- getdata(data, st.2)
st.sample2
set.seed(123)
section.ids <- rep(LETTERS[1:4], c(10, 20, 30, 40))
rep(c("F", "M"), 4)
rep(rep(c("F", "M"), 4),
c(10, 0, 5, 15, 20, 10, 15, 25))
section.genders <-
rep(rep(c("F", "M"), 4),
c(10, 0, 5, 15, 20, 10, 15, 25))
section.scores <- round(runif(100, 60, 80))
data <- data.frame(
Section = section.ids,
Gender = section.genders,
Score = section.scores)
head(data)
order(data$Section, data$Gender)
data <- data[order(data$Section, data$Gender), ]
freq <- table(data$Section, data$Gender)
freq
st.sizes <- 20 * freq / sum(freq)
st.sizes
as.vector(st.sizes)
t(st.sizes)
as.vector(t(st.sizes))
st.sizes <- st.sizes[st.sizes != 0]
st.sizes
st.3 <- sampling::strata(data,
stratanames = c("Section", "Gender"),
size = st.sizes, method = "srswor",
description = TRUE)
st.3
set.seed(123)
section.ids <- rep(LETTERS[1:4], c(10, 20, 30, 40))
section.genders <-
rep(rep(c("F", "M"), 4),
c(10, 0, 5, 15, 20, 10, 15, 25))
section.scores <- round(runif(100, 60, 80))
data <- data.frame(
Section = section.ids,
Gender = section.genders,
Score = section.scores)
head(data)
data <- data[order(data$Section, data$Gender), ]
freq <- table(data$Section, data$Gender)
freq
st.sizes <- 20 * freq / sum(freq)
st.sizes
as.vector(st.sizes)
as.vector(t(st.sizes))
st.sizes <- as.vector(t(st.sizes))
st.sizes <- st.sizes[st.sizes != 0]
st.sizes
st.3 <- sampling::strata(data,
stratanames = c("Section", "Gender"),
size = st.sizes, method = "srswor",
description = TRUE)
st.3
st.sample3
st.sample3 <- getdata(data, st.3)
st.sample3
data("swissmunicipalities")
table(swissmunicipalities$REG)
View(swissmunicipalities)
order(swissmunicipalities$REG)
data <- swissmunicipalities[order.index, ]
#
order.index <- order(swissmunicipalities$REG)
data <- swissmunicipalities[order.index, ]
View(data)
st <- sampling::strata(data, stratanames = c("REG"),
size = c(14,22,8,4,11,5,6) ,
method = "srswor")
sample.5 <- getdata(data, st)
table(sample.5$REG)
freq <- table(swissmunicipalities$REG)
freq
70 * freq / sum(freq)
sizes <- round(70 * freq / sum(freq))
sizes
sum(sizes)
st <- sampling::strata(data, stratanames = c("REG"),
size = sizes, method = "srswor")
head(st)
sample <- getdata(data, st)
head(sample[1:5])
set.seed(123)
section.ids <- rep(LETTERS[1:4], c(10, 20, 30, 40))
section.scores <- round(runif(100, 60, 80))
data <- data.frame(
Section = section.ids,
Score = section.scores)
table(data$Section)
cl <- cluster(data, c("Section"), size = 2,
method="srswor")
cl <- sampling::cluster(data, c("Section"), size = 2,
method="srswor")
cl.sample <- getdata(data, cl)
table(cl.sample$Section)
cl <- sampling::cluster(data, c("Section"), size = 2,
method="srswor")
cl.sample <- getdata(data, cl)
table(cl.sample$Section)
#
set.seed(113)
table(swissmunicipalities$REG)
cl <- sampling::cluster(swissmunicipalities, c("REG"),
size = 4, method="srswr")
sample.6 <- getdata(swissmunicipalities, cl)
table(sample.6$REG)
library(sampling)
library(UsingR)
View(alltime.movies)
rownames(alltime.movies)
nchar(rownames(alltime.movies))
titles <- sub(" +$", "", rownames(alltime.movies))
titles
N <- nrow(alltime.movies)
n <- 5
set.seed(489)
srswr(n, N)
set.seed(489)
s <- srswr(n, N)
counts <- s[s!=0]
counts
(1:N)[s!=0]
for (i in 1:length(rows)) {
cat("I would watch", titles[rows[i]], counts[i],
ifelse(counts[i] == 1, "time", "times"), "\n")
}
rows <- (1:N)[s!=0]
rows
for (i in 1:length(rows)) {
cat("I would watch", titles[rows[i]], counts[i],
ifelse(counts[i] == 1, "time", "times"), "\n")
}
set.seed(100)
x <- 1:5
x
sample(x, replace = TRUE)
sample(x, replace = TRUE)
sample(x, replace = TRUE)
set.seed(100)
x <- 1:5
sample(x, replace = TRUE)
sample(x, replace = TRUE)
replicate(10, sample(x, replace = TRUE))
y <- replicate(10, sample(x, replace = TRUE),
simplify = FALSE)
y
sapply(y, mean, simplify = TRUE)
set.seed(120)
pop.mean <- 60
pop.sd <- 10
sample.size <- 30
x <- rnorm(sample.size, mean = pop.mean, sd = pop.sd)
x <- as.integer(x)
x
resamples.1 <- replicate(1000,
sample(x, replace = TRUE),
simplify = FALSE)
head(resamples.1, n = 2)
xbar.star <- sapply(resamples.1, mean, simplify = TRUE)
length(xbar.star)
head(xbar.star, n = 6)
hist(xbar.star, breaks=40, prob = TRUE,
xlim=c(50,70), ylim=c(0, 0.3))
sd.sample.means <- pop.sd/sqrt(sample.size)
sd.sample.means
sd(xbar.star)
curve(dnorm(x, mean = pop.mean, sd = sd.sample.means),
from = 50, to = 70, add = TRUE)
mean(xbar.star)
mean(x)
mean(xbar.star) - mean(x)
sd(xbar.star)
sd.sample.means
library(boot)
set.seed(120)
x
boot(data = x, statistic = samplemean, R = 1000)
samplemean <- function(x, indices) {
return (mean(x[indices]))
}
boot(data = x, statistic = samplemean, R = 1000)
set.seed(120)
length(rivers)
rivers
?rivers
hist(rivers, breaks = 20)
mean(rivers)
median(rivers)
resamples.2 <- replicate(1000,
sample(rivers, replace = TRUE),
simplify = FALSE)
medians.star <- sapply(resamples.2, median,
simplify = TRUE)
length(medians.star)
hist(medians.star, breaks=30, prob = TRUE)
median(rivers)
mean(medians.star)
mean(medians.star) - median(rivers)
sd(medians.star)
set.seed(120)
samplemedian <- function(x, indices) {
return (median(x[indices]))
}
boot(data = rivers,
statistic = samplemedian, R = 1000)
quantile(medians.star, c(0.025, 0.975))
set.seed(120)
samplemedian <- function(x, indices) {
return (median(x[indices]))
}
boot.data <- boot(data = rivers,
statistic = samplemedian, R = 1000)
boot.ci(boot.data, conf = 0.95, type="perc")
ages <- c(25,26,55,37,21,42)
ages
affils <- c("R","D","D","R","U","D")
affils
table(affils)
table(ages, affils)
tapply(ages, affils, mean)
barplot(tapply(ages, affils, mean),
col = c("blue", "red", "green"))
for (party in sort(unique(affils))) {
cat(party, mean(ages[affils == party]), "\n")
}
unique(affils)
sort(unique(affils))
ages[affils == 'D']
mean(ages[affils == 'D'])
aggregate(ages, by=list(Party = affils), FUN="mean")
tapply(ages, affils, mean)
df <- data.frame(
gender=c("M","M","F","M","F","F"),
age=c(47,59,21,32,33,24),
income=c(55000,88000,32450,76500,123000,45650))
df
# average income by gender using tapply
tapply(df$income, df$gender, mean)
# average income by gender using aggregate
aggregate(df$income, by = list(Sex = df$gender), FUN = mean)
# or
aggregate(income ~ gender, data = df, FUN = mean)
# For number of values in each group
tapply(df$income, df$gender, length)
df
aggregate(df$income, by = list(Sex = df$gender), FUN = length)
aggregate(income ~ gender, data = df, FUN = length)
# average age by gender using tapply
tapply(df$age, df$gender, mean)
# average age by gender using aggregate
aggregate(df$age, by = list(Sex = df$gender), FUN = mean)
# or
aggregate(age ~ gender, data = df, FUN = mean)
ifelse(df$age > 25,TRUE,FALSE)
df
df$over25 <- ifelse(df$age > 25,TRUE,FALSE)
df
tapply(df$income, df$over25, mean)
# using aggregate
aggregate(df$income, by = list(Group = df$over25), FUN = mean)
aggregate(income ~ over25, data = df, FUN = mean)
tapply(df$income,list(df$gender,df$over25),mean)
aggregate(df$income, by = list(Sex = df$gender, Group = df$over25),
FUN = mean)
aggregate(income ~ gender + over25, data = df, FUN = mean)
tapply(df$income,list(df$gender,df$over25),length)
aggregate(income ~ gender + over25, data = df, FUN = length)
?mtcars
View(mtcars)
colnames(mtcars)
mtcars[c(2,10)]
aggdata <-aggregate(mtcars,
by=list(mtcars$cyl,mtcars$gear),
FUN=mean, na.rm=TRUE)
aggdata
aggdata
aggdata <-aggregate(mtcars[-c(2, 10)],
by=list(Cylinders=mtcars$cyl, Gears=mtcars$gear),
FUN=mean, na.rm=TRUE)
aggdata
aggdata
