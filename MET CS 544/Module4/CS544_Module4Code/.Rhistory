inc.3(10)
inc.3(10, 20)
inc.4 <- function (x = 5, y = 7) {
return (x + y)
}
inc.4()
inc.4(2)
inc.4(2, 3)
inc.4(y = 3)
x <- 10
foo <- function() {
cat("#2 In foo ", x, "\n");
x <- 20
cat("#3 In foo ", x, "\n");
bar()
cat("#6 In foo ", x, "\n");
}
bar <- function() {
cat("#4 In bar ", x, "\n");
x <- 30
cat("#5 In bar ", x, "\n");
}
cat("#1 Before foo ", x, "\n");
foo()
cat("#7 After foo ", x, "\n");
x <- 10
y <- 20
z <- 1
test.1 <- function(a, b) {
x <- a
y <- b
z <<- a + b
return (z)
}
test.1(1, 2)
x
y
z
x <- 10
y <- 20
z <- 1
test.1 <- function(a, b) {
x <- a
y <- b
z <- a + b
return (z)
}
test.1(1, 2)
x
y
z
inc.1 <- function (x) {
x + 1
}
inc.1(10)
x <- 10
y <- 20
if (x < y) {
my.max <- y
my.min <- x
} else {
my.max <- x
my.min <- y
}
my.max
my.min
my.max <- if (x < y) y else x
my.max
my.max <- ifelse(x < y, y, x)
my.max
my.maxmin <- function (x, y) {
if (x < y) {
return (c(y, x))
} else {
return (c(x, y))
}
}
my.maxmin(100, 200)
my.maxmin(100, 20)
x <- c(10, 20, 30)
for (i in x) {
cat("Square of ", i, " = ", i*i, "\n")
}
x <- c(10, 20, 30, 40, 50)
for (i in x) {
cat("Square of ", i, " = ", i*i, "\n")
}
for (number in x) {
cat("Square of ", number, " = ", number*number, "\n")
}
for (i in x) {
cat("Square of ", i, " = ", i*i, "\n")
}
i
for (i in seq(1,10, by = 2)) {
cat("Square of ", i, " = ", i*i, "\n")
}
for (i in seq(1,10, by = 2)) {
cat("Square of ", i, " = ", i*i)
}
for (i in seq(1,10, by = 2)) {
cat("Square of ", i, " = ", i*i, "\n")
}
my.max <- function (x) {
result <- -Inf
for (number in x) {
if (number > result) {
result <- number
}
}
return (result)
}
my.max(c(100, 50, 200, 80))
my.max(c(100, 50, 200, 80, 300, 400, 10, 500))
-Inf
# while
n <- 10
sum <- 0
i <- 1
while (i <= n) {
sum <- sum + i
i <- i+1
}
cat("Sum of first ", n, " numbers = ", sum)
sum
sum(c(10,20,30))
# while
n <- 10
sum <- 0
sum(c(10,20,30))
sum <- function(x) {}
sum <- function(x) { x + 2 }
sum(c(10,20,30))
i <- 1
repeat {
cat("Square of ", i, " = ", i*i, "\n")
i <- i+2
if (i > 10) break
}
my.reverse <- function (x) {
x[length(x):1]
}
my.reverse(c(2 , 5, 7))
my.reverse(20:30)
x <- c(2,5,7)
x[1]
x[c(1,3)]
x[c(1,2,3)]
x[c(2,1,3)]
x[c(3,2,1)]
1:10
10:1
my.factorial <- function (n) {
if (n <= 0) {
return (1)
} else {
return (n * my.factorial(n-1))
}
}
my.factorial(5)
5*4*3*2*1
install.packages("prob")
library(prob)
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
detach("package:prob", unload=TRUE)
tosscoin(1)
library("prob", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
tosscoin(1)
tosscoin(2)
tosscoin(3)
rolldie(1)
rolldie(1, nsides = 4)
urnsamples(c("r","g","b"), size = 2)
urnsamples(1:3, size = 2,
replace = FALSE, ordered = TRUE)
urnsamples(c("r","g","b"), size = 2,
replace = FALSE, ordered = TRUE)
urnsamples(c("r","g","b"), size = 2,
replace = TRUE, ordered = TRUE)
urnsamples(c("r","g","b"), size = 2,
replace = TRUE)
# Unordered Sampling without Replacement: Combinations  C(n,k)
nsamp(n = 4, k = 2, replace = FALSE, ordered = FALSE)
urnsamples(1:4, size = 2, replace = FALSE, ordered = FALSE)
# Ordered Sampling without Replacement: Permutations
nsamp(n = 4, k = 2, replace = FALSE, ordered = TRUE)
urnsamples(1:4, size = 2, replace = FALSE, ordered = TRUE)
# Ordered Sampling with Replacement  (n^k)
nsamp(n = 4, k = 2, replace = TRUE, ordered = TRUE)
urnsamples(1:4, size = 2, replace = TRUE, ordered = TRUE)
# Unordered Sampling with Replacement  C(n+k-1, k) = C(n+k-1, n-1)
nsamp(n = 4, k = 2, replace = TRUE, ordered = FALSE)
urnsamples(1:4, size = 2, replace = TRUE, ordered = FALSE)
S <- tosscoin(3, makespace = TRUE)
S
1/8
subset(S, toss3 == 'H')
subset(S, toss1 == 'H' & toss3 == 'H')
S <- rolldie(2, makespace = TRUE)
S
head(S)
tail(S)
nrow(S)
subset(S, X1 == X2)
1/36
subset(S, X1 + X2 >= 10)
subset(S, X1 == 5 | X1 == 6)
subset(S, X1 %in% 5:6)
subset(S, X1 %in% 5:6 & X2 %in% c(1,3))
S <- rolldie(3, makespace = TRUE)
nrow(S)
subset(S, isin(S, c(4,5,6), ordered = TRUE))
1/216
subset(S, isin(S, c(4,6), ordered = TRUE))
S <- cards(makespace = TRUE)
nrow(S)
head(S, n = 2)
1/52
subset(S, suit == "Club")
subset(S, suit == "Diamond")
subset(S, suit == "Heart")
subset(S, suit == "Spade")
subset(S, rank %in% 2:4)
subset(S, rank %in% c('K', 'Q'))
outcomes <- rolldie(1)
outcomes
p <- rep(1/6, times = 6)
p
probspace(outcomes, probs = p)
rolldie(1, makespace = TRUE)
p <- c(0.2, 0.15, 0.15, 0.15, 0.15, 0.2)
probspace(outcomes, probs = p)
sum(p)
p <- c(0.4, 0.15, 0.15, 0.15, 0.15, 0.2)
probspace(outcomes, probs = p)
S <- cards(makespace = TRUE)
A <- subset(S, rank == "Q")
A
4/52
Prob(A)
Prob(S, rank == "Q")
B <- subset(S, suit == "Heart")
B
Prob(B)
Prob(S, suit == "Heart")
5 %% 2
4 %% 2
4 %% 2 == 0
5 %% 2 == 0
isEven(4)
isEven <- function (x) {
return (x %% 2 == 0)
}
isEven(4)
isEven(5)
isEven <- function (x) {
if (x %% 2 == 0)
return (TRUE)
else
return (FALSE)
}
isEven(4)
isEven(5)
evenCount <- function (x) {
count <- 0
for (num in x) {
if (num %% 2 == 0)
count <- count + 1
}
return (count)
}
evenCount(c(3,6,7,8,9))
evenCount(c(3,5,7,9))
x <- c(3,6,7,8,9)
x %% 2 == 0
sum(c(FALSE, TRUE))
sum(c(1,2,3))
x <- c(3,6,7,8,9)
x
x %% 2 == 0
sum(x %% 2 == 0)
evenCount <- function (x) {
count <- sum(x %% 2 == 0)
return (count)
}
evenCount(c(3,6,7,8,9))
evenCount(c(3,5,7,9))
evenSum <- function (x) {
result <- 0
for (num in x) {
if (num %% 2 == 0)
result <- result + num
}
return (result)
}
evenSum(c(3,6,7,8,9))
evenSum(c(3,5,7,9))
x
x %% 2 == 0
x[x %% 2 == 0]
evenSum <- function (x) {
result <- sum(x[x %% 2 == 0])
return (result)
}
evenSum(c(3,6,7,8,9))
evenSum(c(3,5,7,9))
1:10
firstEvenIndex <- function (x) {
result <- NA
for (i in 1:length(x)) {
if (x[i] %% 2 == 0) {
result <- i
break
}
}
return (result)
}
firstEvenIndex(c(3,6,7,8,9))
firstEvenIndex(c(3,5,7,9))
x
x < 10
all(x < 10)
all(x < 5)
x
x[1:5]
x[5:1]
sameInReverse <- function (x) {
len <- length(x)
return (all(x == x[len:1]))
}
# TRUE examples
sameInReverse(c(3,5,3))
sameInReverse(c(10, 20, 30, 30, 20, 10))
sameInReverse(c(3,5,4))
sameInReverse(c(10, 20, 30, 40, 30, 10))
x <- c(10, 5, 8, 12, 2, 10, 12)
max(x)
x == max(x)
(1:length(x))[x == max(x)]
which(x == max(x))
which.max(x)
which.min(x)
x <- c(10, 12, 14, 14, 14, 15, 15, 16, 10, 10)
y <- rle(x)
y
y$lengths
y$values
# Example input
x <- c(10,10,30,40,40,40,40,40,50,50,20,20,20,40,20,20,20)
# Example input
x <- c(10,10,30,40,40,40,40,40,50,50,20,20,20,40,20,20,20)
y <- rle(x)
y
y$lengths
y$values
which.max(y$lengths)
max(y$lengths)
#Solution
y$values[which.max(y$lengths)]
x <- c(10,10,30,40,40,40,40,40,50,50,20,20,20,40,20,20,20)
y <- rle(x)
# Length of max run
max_run_length <- max(y$lengths)
max_run_length
# Index of max run in rle output
max_run_index <- which.max(y$lengths)
max_run_index
# Number of values before this
prev_values_length <- ifelse(max_run_index == 1, 0, sum(y$lengths[1:(max_run_index-1)]))
prev_values_length
# starting index of max run
prev_values_length + 1
# index into x to get the max run
(prev_values_length + 1) : (prev_values_length + max_run_length)
x[(prev_values_length + 1) : (prev_values_length + max_run_length)]
library(prob)
S <- tosscoin(3, makespace = TRUE)
S
S <- tosscoin(3, makespace = TRUE)
S1 <- addrv(S, FUN = countHeads, name = "U")
S1
countHeads <- function(x) {
count <- 0
if (x[1] == "H")
count <- count+1
if (x[2] == "H")
count <- count+1
if (x[3] == "H")
count <- count+1
return (count)
}
S <- tosscoin(3, makespace = TRUE)
S1 <- addrv(S, FUN = countHeads, name = "U")
S1
marginal(S1, vars = "U")
countHeads2 <- function(x) {
return (sum(x == "H"))
}
S <- tosscoin(4, makespace = TRUE)
S1 <- addrv(S, FUN = countHeads2, name = "U")
S1
marginal(S1, vars = "U")
1/16
x <- 3
y <- 5
x - y
abs(x - y)
bayes <- function (prior, likelihood) {
numerators <- prior * likelihood
return (numerators / sum(numerators))
}
prior <- c(0.4, 0.5, 0.1)
like <- c(0.7, 0.4, 0.2)
bayes(prior, like)
library(prob)
#a
S <- rolldie(2, makespace = TRUE)
S1 <- addrv(S, U = abs(X1 - X2))
my.absDiff <- function (x) {
return (abs(x[1] - x[2]))
}
S1 <- addrv(S, FUN = my.absDiff, name = "U")
#b
Prob(S1, U == 2)
Prob(S1, U <= 2)
# Someone interpreted the question to be for U == 1 or U == 2.
# Then this is also acceptable
Prob(S1, U == 1 | U == 2)
#c
marginal(S1, vars = "U")
is.evenSum <- function (x) {
return ( (x[1] + x[2]) %% 2 == 0)
}
S2 <- addrv(S1, FUN = is.evenSum, invars = c("X1", "X2"), name = "V")
Prob(S2, V == TRUE)
marginal(S2, vars = "V")
dow <- read.csv('http://kalathur.com/dow.csv', stringsAsFactors = FALSE)
#a
head(dow)
diffs <- diff(dow$VALUE)
dow$DIFFS <- c(0, diffs)
head(dow)
#b
sum(dow$DIFFS > 0)
sum(dow$DIFFS < 0)
#c
dow[dow$DIFFS >= 400, ]
#or
subset(dow, DIFFS >= 400)
dow$STREAK <- ifelse(dow$DIFFS >= 100, "Y", "N")
head(dow)
x <- rle(dow$STREAK)
# max winning streak length
a <- max(x$lengths[x$values == "Y"])
a
# index
b <- which.max(x$lengths == a & x$values == "Y")
b
# entries before the longest winning streak
c <- sum(x$lengths[1: (b-1)])
c
# result
dow[(c+1):(c+a), ]
margin.table(UCBAdmissions, 3)
margin.table(UCBAdmissions, 2)
margin.table(UCBAdmissions, c(3,2))
margin.table(UCBAdmissions, c(3,1))
margin.table(UCBAdmissions, c(3,2,1))
margin.table(UCBAdmissions, c(1,2,3))
ftable(UCBAdmissions, col.vars = c("Dept", "Gender"))
ftable(UCBAdmissions, col.vars = c("Dept", "Gender"))
UCBAdmissions
UCB <- as.data.frame(UCBAdmissions)
UCB
table(UCB$Dept)
table(UCB$Gender)
apply(UCB$Dept, UCB$Gender)
apply(UCB$Dept, UCB$rejected)
addmargins(UCBAdmissions)
subset(UCBAdmissions.info, Gender == "Male"
)
x <- seq(212,320)
pdf <- dnorm(x, mean = 266, sd = 16)
plot(x, pdf, type="l", col="red",
xlim=c(212,320), ylim=c(0,0.03),
xaxt="n", yaxt="n",
main="Gestation Period", xlab="Days", ylab="PDF")
axis(side = 1, at = c(218,234,250,266,282,298,314),
labels = TRUE)
axis(side = 2, at = c(0,0.01,0.02,0.03),
labels = TRUE)
mu <- 266; sigma <- 16
pnorm(mu, mean = mu, sd = sigma)
pnorm(mu, mean = mu, sd = sigma, lower.tail = FALSE)
pnorm(mu - 3*sigma, mean = mu, sd = sigma)
pnorm(mu + 3*sigma, mean = mu, sd = sigma) -
pnorm(mu - 3*sigma, mean = mu, sd = sigma)
pnorm(mu + 2*sigma, mean = mu, sd = sigma) -
pnorm(mu - 2*sigma, mean = mu, sd = sigma)
pnorm(mu + sigma, mean = mu, sd = sigma) -
pnorm(mu - sigma, mean = mu, sd = sigma)
x <- seq(212,320)
cdf <- pnorm(x, mean = 266, sd = 16)
cdf
plot(x, cdf, type="l", col="red",
xlim=c(212,320), ylim=c(0,1),
xaxt="n",
main="Gestation Period CDF", xlab="Days", ylab="CDF")
abline(h=0)
abline(h=1)
axis(side = 1, at = c(218,234,250,266,282,298,314),
labels = TRUE)
