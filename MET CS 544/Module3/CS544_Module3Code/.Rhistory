x
pie(x)
pie(x, col=rainbow(4))
pie(x, col=hcl(h = c(30, 120, 210, 300)))
pie(x, density = 10, angle = 10 + 15 * 1:4,
col=hcl(h = c(30, 120, 210, 300)))
pie(table(central.park.cloud))
pie(table(central.park.cloud),
col=hcl(c(0, 60, 120)))
data <- table(central.park.cloud)
slice.labels <- names(data)
slice.percents <- round(data/sum(data)*100)
slice.labels <- paste(slice.labels, slice.percents)
slice.labels <- paste(slice.labels, "%", sep="")
slice.labels
pie(data, labels = slice.labels,
col=hcl(c(0, 60, 120)))
data <- table(central.park.cloud)
slice.labels <- sprintf("%s %d%%", names(data),
round(data/sum(data)*100))
slice.labels
pie(data, labels = slice.labels,
col=hcl(c(0, 60, 120)))
# Odd number of values
x <- c(71,72,73,73,74,75,77,81,83,87,91)
x <- matrix(c(50,25,10,15), nrow=2,
byrow = TRUE)
x
rownames(x) <- c("Class1", "Class2")
colnames(x) <- c("Pass", "Fail")
x
addmargins(x)
t(x)
addmargins(t(x))
par(mfrow=c(2,2))
mosaicplot(x, color=c("green", "red"),
main = "mosaicplot( x )")
mosaicplot(t(x), color=c("red", "blue"),
main = "mosaicplot( t(x) )")
barplot(t(x), xlab = "Class",
main = "barplot( t(x) )",
ylim=c(0,80), col=c("green", "red"))
legend("topright", legend = c("Pass", "Fail"),
fill = c("green", "red"), horiz = TRUE, cex=0.8)
barplot(x, xlab = "Pass/Fail",
main = "barplot( x )",
ylim=c(0,80), col=c("red", "blue"))
legend("topright", legend = c("Class1", "Class2"),
fill = c("red", "blue"), horiz = TRUE, cex=0.8)
par(mfrow=c(1,1))
set.seed(397)
cardata <- mtcars
cardata$Make <- sapply( strsplit(rownames(mtcars), " "), "[[", 1)
library(sampling)
pik = inclusionprobabilities(cardata,12)
s = UPsystematic(pik)
sample2 = cardata[s != 0]
table(sample2$Make)
cardata=cardata[order(cardata$gear),]
freq= table(cardata$gear)
strata.sizes = round(12*freq)
starta.sizes = starta.sizes[starta.sizes != 0]
st = strata(cardata,stratanames=c("gear"),size= strata.sizes, method="srswor")
sample3 = getdata(cardata, st)
freq
library(tidyverse)
library(stringr)
#read the data
file <- "http://people.bu.edu/kalathur/datasets/lincoln.txt"
words <- scan(file, what=character())
# a Detect and show all the words that have a punctuation symbol.
words[str_detect(words, "[:punct:]")]
# b Replace all the punctuations in the corresponding words with an empty string
str_replace(words,"[:punct:]", "" )
empty_words_removed = words[words != ""]
#b.2 convert to lower case
new_words_data = tolower(empty_words_removed)
top5words = sort(table(new_words_data), decreasing = TRUE)[1:5]
# d plot of frequencies
Words_length = str_length(new_words_data)
boxplot(Words_length, Main ="Boxplot of the words frequency", col ="lightblue")
# e The words with the longest length
longest_length = str_length(new_words_data)
new_words_data[which(longest_length == max(longest_length))]
# f The words that start with the letter p.
Words_Start_with_P = new_words_data[str_detect(new_words_data, "^p")]
#b.2 convert to lower case
new_words_data = tolower(empty_words_removed)
top5words = sort(table(new_words_data), decreasing = TRUE)[1:5]
# d plot of frequencies
Words_length = str_length(new_words_data)
boxplot(Words_length, Main ="Boxplot of the words frequency", col ="lightblue")
# e The words with the longest length
longest_length = str_length(new_words_data)
new_words_data[which(longest_length == max(longest_length))]
# f The words that start with the letter p.
Words_Start_with_P = new_words_data[str_detect(new_words_data, "^p")]
# g The words that start with the letter r.
words_start_with_r = new_words_data[str_detect(new_words_data, "r$")]
# h The words that start with the letter p and end with the letter r.
words_start_p_ends_with_r = new_words_data[str_detect(new_words_data,"^p[a-z]+r$" )]
stopfile <- "http://people.bu.edu/kalathur/datasets/stopwords.txt"
stopwords <- scan(stopfile, what=character())
stopwords_tb = as_tibble(stopwords)
new_words_data_tb = as_tibble(new_words_data)
data_tb = new_words_data_tb  %>%
filter(new_words_data_tb$value %in% stopwords_tb$value)
head(data_tb)
frequent_words = sort(table(data_tb$value), decreasing = TRUE)[1:5]
# d plot of frequencies
WordsLength = str_length(data_tb$value)
frequent_words
dow <- read.csv('http://people.bu.edu/kalathur/datasets/DJI_2020.csv')
#### 3.7 - Indexing
ages <- c(21,22,23,24,25,26,27)
ages
ages[3]
ages[1]
ages[0]
1:3
ages[1:3]
ages[c(1,5)]
c(1,5)
c(ages[1], ages[5])
length(ages)
ages[c(1, length(ages))]
ages
ages[-1]
ages[-(1:3)]
ages[c(-1,-length(ages))]
c(1, length(ages))
-c(1, length(ages))
ages[-c(1, length(ages))]
ages
ages[c(TRUE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE)]
ages < 24
ages[ages < 24]
ages[c(TRUE, FALSE)]
ages[c(FALSE, TRUE)]
ages[c(T, F, F)]
ages
ages %% 2
ages %% 2 == 0
ages[ages %% 2 == 0]
ages %% 2 == 1
ages[ages %% 2 == 1]
ages
ages[ages < 24]
ages[ages > 25]
ages[ages >= 25]
ages[ages >= 24 & ages <= 26]
ages >= 24
ages <= 26
ages >= 24 & ages <= 26
ages >= 24 | ages <= 26
letters
LETTERS
length(letters)
letters[c(1, 26)]
letters[c(1, length(letters))]
letters[c(1,2,3,4,5)]
letters[1:5]
letters[c(TRUE, FALSE)]
letters[c(FALSE, TRUE)]
1:10
20:25
25:20
mode(20:25)
typeof(20:25)
typeof(c(20,21,22,23,24,25))
1.5:10.5
1.5:10
#
2 * 1:5
1:5
x <- 2 * 1:5
mode(x)
typeof(x)
#
n <- 5
1:n-1
1:n
(1:n) - 1
1:(n-1)
1:n
seq(0, 5)
0:5
?seq
seq()
seq(from = 0, to = 5)
seq(2, 10, by = 2)
seq(2, 10, by = 3)
seq(from = 2, to = 10, by = 2)
seq(2, by = 2, length = 5)
seq(10, 2)
seq(from = 10, to = 2, by = -2)
seq(from = 10, to = 2, by = 2)
seq(1, 2, by = 0.25)
seq(from = 1.5, to = 4.5, by = 0.5)
x <- c(1,2,3,4,5)
x
rep(x, 3)
c(x,x,x)
rep(x, times = 3)
rep(x, each = 3)
rep(x, times = 2, each = 3)
rep(x, c(1,2,1,2,1))
rep(x, c(1,2))
rep(x, c(0,2,0,3,0))
x
rep(x, x)
x <- 1:5
x
length(x)
x[1] <- 10
x
x[c(2,5)]
x[c(2,5)] <- c(20, 50)
x
x[8] <- 80
x
length(x)
length(x) <- 10
x
length(x) <- 3
x
x <- 1:5
x
y <- x
x[1] <- 10
x
y
10:99
ages <- c(20, 22, 23, 23, 26)
ages
names(ages)
c("Alice", "Bob",
"Charlie", "Dave", "Ed")
names(ages) <- c("Alice", "Bob",
"Charlie", "Dave", "Ed")
ages
ages[2]
ages["Bob"]
ages["Bob"] == 22
ages["Bob"] * 2
2 * ages
ages[c(1,5)]
ages[c("Alice", "Ed")]
names(ages)
names(ages)[2]
names(ages)[2] <- "Robert"
ages
ages["Bob"]
ages["Robert"]
x <- 10
x
is.vector(x)
length(x)
10 == c(10)
##
letters
paste(letters, 1:26)
paste(letters, 1:length(letters), sep = " is ")
paste(letters[-26], letters[-1], sep = " is before " )
letters[-26]
letters[-1]
paste(letters[-26], letters[-1], sep = " is before " )
letters
letters[1:26]
letters[1:6]
letters[1:30]
letters[c(T, F, F)]
letters[seq(1, 26, by = 3)]
seq(1, 26, by = 3)
letters[1:26 %% 3 == 1]
1:26
1:26 %% 3
1:26 %% 3 == 1
letters[1:26 %% 3 == 1]
# By row
data <- c(80, 75, 85, 82,
90, 88, 92, 95,
81, 78, 84, 87)
data
scores <- matrix(data,
nrow = 3, ncol = 4,
byrow = TRUE)
scores
# By column
data <- c(80, 90, 81,
75, 88, 78,
85, 92, 84,
82, 95, 87)
data
scores <- matrix(data,
nrow = 3, ncol = 4)
scores
scores
scores[1, 2]
scores[1, 20]
scores[1, ]
scores[1]
scores[ ,1]
scores[ ,3]
scores[3, ]
scores
scores[ , c(1,3)]
scores[c(2,3), ]
scores[c(2,3), c(1,3)]
dimnames(scores) <- list(
c("Alice", "Bob", "Charlie"),
c("Quiz1", "Quiz2", "Quiz3", "Quiz4"))
scores
scores[1, 2]
scores["Alice", "Quiz2"]
scores["Alice", ]
scores[ ,"Quiz1"]
scores[ , c("Quiz1", "Quiz3")]
scores[c("Alice", "Charlie"), ]
scores[c("Alice", "Charlie"),
c("Quiz1", "Quiz3")]
rownames(scores)
colnames(scores)
rownames(scores) <- c("A", "B", "C")
scores
is.matrix(scores)
dim(scores)
nrow(scores)
ncol(scores)
scores
as.vector(scores)
scores
dimnames(scores) <- list(
c("Alice", "Bob", "Charlie"),
c("Quiz1", "Quiz2", "Quiz3", "Quiz4"))
scores
scores[1, 1] <- 100
scores
scores[1, ] <- 90
scores
scores["Alice", ] <- c(91, 92, 93, 94)
scores
scores["Alice", ] <- c(80, 90)
scores
scores[,] <- 100
scores
athlete.names   <- c("Mayweather", "Ronaldo", "James", "Messi", "Bryant")
athlete.sport   <- c("Boxing", "Soccer", "Basketball", "Soccer", "Basketball")
athlete.salary  <- c(105, 52, 19.3, 41.7, 30.5)
athlete.endorsements <- c(0, 28, 53, 23, 31)
athlete.info <- data.frame(
Name = athlete.names,
Salary = athlete.salary,
Endorsements =  athlete.endorsements,
Sport = athlete.sport)
athlete.info
colnames(athlete.info)
rownames(athlete.info)
dim(athlete.info)
nrow(athlete.info)
ncol(athlete.info)
athlete.info
athlete.info[[1]]
athlete.info[[4]]
athlete.info[[2]]
athlete.info[["Salary"]]
athlete.info$Sport
athlete.info$Salary
xyz <- "Salary"
mean(athlete.info$xyz)
mean(athlete.info[[xyz]])
athlete.info[ ,1]
athlete.info
athlete.info[ ,"Salary"]
summary(athlete.info$Sport)
summary(athlete.info$Salary)
athlete.info[3, 2]
athlete.info[3,"Salary"]
athlete.info$Name == "James"
athlete.info$Name
athlete.info[athlete.info$Name == "James","Salary"]
athlete.info[athlete.info$Name == "James",]
athlete.info[athlete.info$Name == "James","Salary"]
athlete.info[athlete.info$Name == "James",c("Salary", "Sport")]
athlete.info[1]
athlete.info[[1]]
athlete.info[c(1,4)]
athlete.info["Sport"]
athlete.info[c("Name", "Sport")]
athlete.info
rownames(athlete.info)
rownames(athlete.info) <-
c("First", "Second", "Third", "Fourth", "Fifth")
athlete.info
athlete.info["Third", ]
athlete.info[2, ]
athlete.info["Second", ]
athlete.info[c(1, 3), ]
athlete.info[c("First", "Third"), ]
athlete.info[c(FALSE, TRUE, FALSE, TRUE, FALSE), ]
athlete.info$Sport == "Soccer"
athlete.info[athlete.info$Sport == "Soccer", ]
subset(athlete.info, Sport == "Soccer")
subset(athlete.info,
Sport == "Soccer" & Salary > 50)
subset(athlete.info, Sport == "Soccer",
select = c(Name, Salary))
athlete.info
athlete.info[c("Sport", "Name")]
colnames(athlete.info)
newCols <- (colnames(athlete.info))[c(2,4,1,3,2)]
athlete.info[newCols]
athlete.info
data.orig <- athlete.info
athlete.info$Pay <-
athlete.info$Salary + athlete.info$Endorsements
athlete.info$Salary + athlete.info$Endorsements
athlete.info
data.orig
athlete.info[1,2] <- 0
athlete.info["First", "Endorsements"] <- 100
athlete.info
athlete.info$Salary <- 50
athlete.info
athlete.info$Salary <- c(10, 20, 30, 40, 50)
athlete.info
athlete.info$Pay <-
athlete.info$Salary + athlete.info$Endorsements
athlete.info
athlete.info$Pay <- NULL
athlete.info
athlete.info$Name <- NULL
athlete.info
x <- c(10, 30, 50, 20, 5)
x > 25
x[x > 25]
length(x[x > 25])
sum(x > 25)
scores
paste("Quiz", 1:4)
paste("Quiz", 1:4, sep="")
paste0("Quiz", 1:4)
paste("Quiz", 1:4, sep="_")
ncol(scores)
paste("Quiz", 1:ncol(scores), sep="_")
library(prob)
S <- rolldie(3, makespace = TRUE)
#a
subset(S, (X1 + X2 + X3 > 10))
Prob(S,   (X1 + X2 + X3 > 10))
#b
subset(S, (X1 == X2 & X2 == X3))
Prob(S,   (X1 == X2 & X2 == X3))
#c
subset(S, ((X1 == X2 & X1 != X3) |
(X2 == X3 & X1 != X2) |
(X1 == X3 & X1 != X2)) )
Prob(S, ((X1 == X2 & X1 != X3) |
(X2 == X3 & X1 != X2) |
(X1 == X3 & X1 != X2)) )
#d
subset(S, (X1 != X2 & X2 != X3 & X1 != X3))
Prob(S, (X1 != X2 & X2 != X3 & X1 != X3))
A <- subset(S, (X1 + X2 + X3 > 10))
subset(A, ((X1 == X2 & X1 != X3) |
(X2 == X3 & X1 != X2) |
(X1 == X3 & X1 != X2)) )
Prob(S, ((X1 == X2 & X1 != X3) |
(X2 == X3 & X1 != X2) |
(X1 == X3 & X1 != X2)),
given = (X1 + X2 + X3 > 10) )
S_A <- probspace(A)
Prob(S_A, ((X1 == X2 & X1 != X3) |
(X2 == X3 & X1 != X2) |
(X1 == X3 & X1 != X2)))
subset(part2A,isrep(part2A,c(1:6),2))
A
part2A <- A
subset(part2A,isrep(part2A,c(1:6),2))
subset(part2A,isrep(part2A,c(1:6),2)) -> y
subset(A, ((X1 == X2 & X1 != X3) |
(X2 == X3 & X1 != X2) |
(X1 == X3 & X1 != X2)) )
choose(18,5)
#a
subset(S, (X1 + X2 + X3 > 10))
Prob(S,   (X1 + X2 + X3 > 10))
#b
subset(S, (X1 == X2 & X2 == X3))
Prob(S,   (X1 == X2 & X2 == X3))
#c
subset(S, ((X1 == X2 & X1 != X3) |
(X2 == X3 & X1 != X2) |
(X1 == X3 & X1 != X2)) )
Prob(S, ((X1 == X2 & X1 != X3) |
(X2 == X3 & X1 != X2) |
(X1 == X3 & X1 != X2)) )
S_A <- probspace(A)
Prob(S_A, ((X1 == X2 & X1 != X3) |
(X2 == X3 & X1 != X2) |
(X1 == X3 & X1 != X2)))
sum(S_A$probs)
x <- c(10,20,30,20,10)
all(x == x[length(x):1])
x <- c(10,20,30,20,10,5)
all(x == x[length(x):1])
isPalindrome<- function(x){
if (x==x[length(x):1]) {
return(TRUE)
} else return(FALSE)
}
isPalindrome(c(10,20,30,10))
