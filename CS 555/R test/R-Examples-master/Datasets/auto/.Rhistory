t.test(heightsOfToyotaCars)$conf[1]
t.test(heightsOfToyotaCars)$conf
t.test(heightsOfToyotaCars)$conf
t.test(heightsOfToyotaCars)$conf.int
t.test(heightsOfToyotaCars)$conf.int
t.test(heightsOfToyotaCars)$conf.int
t.test(heightsOfToyotaCars)$conf.int
t.test(heightsOfToyotaCars)
length(heightsOfToyotaCars)
t.test(heightsOfToyotaCars)
length(heightsOfToyotaCars)
t.test(heightsOfToyotaCars)$conf.int
t.test(heightsOfToyotaCars)$conf.int[1]
upper <- tapply(height, make, function(v) t.test(v)$conf.int[2])
setwd("/media/kia/Data/Dropbox/Teaching/BU-Teaching/BU-Data-Analytics-Class/Example-Dataset/AllData/auto/")
# Load up your dataset
data <- read.csv("AutoDatahtm.csv")
# print out the column names so that you can see what is inside the dataframe
colnames(data)
# print first 4 rows of mydata
head(data, n=4)
# this command selects first the heights of all cars and then select from that only the toyota cars.
# The data is selected first based on the column name height and then based on the column name toyota.
heightsOfToyotaCars <- data$height[make=="toyota"]
heightsOfMazdaCars <- data$height[make=="mazda"]
# check the lenght of each variables that you have created
# this should return 32
length(heightsOfToyotaCars)
# This should return 12
length(heightsOfMazdaCars)
# We can use the aggregate function to generate the summary for each different make of cars, like audi, bmw, etc...
aggregate(data$height, by =list(data$make), FUN=summary)
# read more aboute the aggregate by using the ?aggregate command
# aggregate splits the data into subsets, computes summary statistics for each, and returns the result in a convenient form.
# aggregate function can be used to generate the standard deviation for each subset
aggregate(data$height, by =list(data$make), FUN=sd)
# Now, let us make a set of plots to present some of the important summary of our autot dataset.
par(mfrow=c(2,2))
# Now we can make boxplot to see the heitghts of cars.
# we use the "~" to seperate the height of each car in to subsets based on their make factories (car brands)
boxplot(data$height~data$make)
# By using the attach command, we can attach the whole dataframe and access the columns as variable names, like height and make
attach(data)
# print out the make
make
# print out heights
height
# We can use the tapply function to calculate the means of each group of cars
# Here we want to calculate the mean, but subset it based on the group of their car brand.
means <- tapply(height, make, mean)
# Now, we find out the lower bound of the heights for each subset of make (car brands)
# Please note that we use here a function that we defined and inside that function we use the t.test the t test to
lower <- tapply(height, make, function(v) t.test(v)$conf.int[1])
# To understand how I get the lower bound of my data from t.test function, you can take a look on the return values that t test function returns.
# let us make a variable for the heights of toyota cars
heightsOfToyotaCars <- data$height[make=="toyota"]
# n is
length(heightsOfToyotaCars)
# then we run t.test and print out the results
t.test(heightsOfToyotaCars)
# And the following command returns the confidence intervals
# It simply includes a lower bound and upper bound interval of my data
t.test(heightsOfToyotaCars)$conf.int
# By using the following lowe bound
t.test(heightsOfToyotaCars)$conf.int[1]
# this is the higher bound
t.test(heightsOfToyotaCars)$conf.int[2]
# We just want to use this function to get the lowerbound and upperbound of the heights data to make a nice plot.
# Fot this purpose we combine it with tapply command
lower <- tapply(height, make, function(v) t.test(v)$conf.int[1])
upper <- tapply(height, make, function(v) t.test(v)$conf.int[2])
#
install.packages(gplots)
install.packages("gplots")
library(gplots)
library("gplots")
barplot2(means, plot.ci = TRUE, ci.l = lower, ci.u =upper)
View(data)
View(data)
setwd("/media/kia/Data/Dropbox/Teaching/BU-Teaching/BU-Data-Analytics-Class/Example-Dataset/AllData/auto/")
# Load up your dataset
data <- read.csv("AutoDatahtm.csv")
# print out the column names so that you can see what is inside the dataframe
colnames(data)
# print first 4 rows of mydata
head(data, n=4)
# this command selects first the heights of all cars and then select from that only the toyota cars.
# The data is selected first based on the column name height and then based on the column name toyota.
heightsOfToyotaCars <- data$height[make=="toyota"]
heightsOfMazdaCars <- data$height[make=="mazda"]
# check the lenght of each variables that you have created
# this should return 32
length(heightsOfToyotaCars)
# This should return 12
length(heightsOfMazdaCars)
# We can use the aggregate function to generate the summary for each different make of cars, like audi, bmw, etc...
aggregate(data$height, by =list(data$make), FUN=summary)
# read more aboute the aggregate by using the ?aggregate command
# aggregate splits the data into subsets, computes summary statistics for each, and returns the result in a convenient form.
# aggregate function can be used to generate the standard deviation for each subset
aggregate(data$height, by =list(data$make), FUN=sd)
# Now, let us make a set of plots to present some of the important summary of our autot dataset.
par(mfrow=c(2,2))
# Now we can make boxplot to see the heitghts of cars.
# we use the "~" to seperate the height of each car in to subsets based on their make factories (car brands)
boxplot(data$height~data$make)
# By using the attach command, we can attach the whole dataframe and access the columns as variable names, like height and make
attach(data)
# print out the make
make
# print out heights
height
# We can use the tapply function to calculate the means of each group of cars
# Here we want to calculate the mean, but subset it based on the group of their car brand.
means <- tapply(height, make, mean)
# Now, we find out the lower bound of the heights for each subset of make (car brands)
# Please note that we use here a function that we defined and inside that function we use the t.test the t test to
lower <- tapply(height, make, function(v) t.test(v)$conf.int[1])
# To understand how I get the lower bound of my data from t.test function, you can take a look on the return values that t test function returns.
# let us make a variable for the heights of toyota cars
heightsOfToyotaCars <- data$height[make=="toyota"]
# n is
length(heightsOfToyotaCars)
# then we run t.test and print out the results
t.test(heightsOfToyotaCars)
# And the following command returns the confidence intervals
# It simply includes a lower bound and upper bound interval of my data
t.test(heightsOfToyotaCars)$conf.int
# By using the following lowe bound
t.test(heightsOfToyotaCars)$conf.int[1]
# this is the higher bound
t.test(heightsOfToyotaCars)$conf.int[2]
# We just want to use this function to get the lowerbound and upperbound of the heights data to make a nice plot.
# Fot this purpose we combine it with tapply command
lower <- tapply(height, make, function(v) t.test(v)$conf.int[1])
upper <- tapply(height, make, function(v) t.test(v)$conf.int[2])
# install the package gplots
# if you have done this one time before you do not need it again.
install.packages("gplots")
# the we need to load the library
library("gplots")
#
# click on the zoom to see the graph better.
barplot2(means, plot.ci = TRUE, ci.l = lower, ci.u =upper, names.arg = c("honda", "mazda", "toyota")
, xlab="Different Car Brands", main= "Mean Height of Cars by their brand name", ylab="Heights of Cars", col= "seegreen"
)
install.packages("gplots")
barplot2(means, plot.ci = TRUE, ci.l = lower, ci.u =upper, names.arg = c("honda", "mazda", "toyota")
, xlab="Different Car Brands", main= "Mean Height of Cars by their brand name", ylab="Heights of Cars", col= "seegreen"
)
setwd("/media/kia/Data/Dropbox/Teaching/BU-Teaching/BU-Data-Analytics-Class/Example-Dataset/AllData/auto/")
# Load up your dataset
data <- read.csv("AutoDatahtm.csv")
# print out the column names so that you can see what is inside the dataframe
colnames(data)
# print first 4 rows of mydata
head(data, n=4)
# this command selects first the heights of all cars and then select from that only the toyota cars.
# The data is selected first based on the column name height and then based on the column name toyota.
heightsOfToyotaCars <- data$height[make=="toyota"]
heightsOfMazdaCars <- data$height[make=="mazda"]
# check the lenght of each variables that you have created
# this should return 32
length(heightsOfToyotaCars)
# This should return 12
length(heightsOfMazdaCars)
# We can use the aggregate function to generate the summary for each different make of cars, like audi, bmw, etc...
aggregate(data$height, by =list(data$make), FUN=summary)
# read more aboute the aggregate by using the ?aggregate command
# aggregate splits the data into subsets, computes summary statistics for each, and returns the result in a convenient form.
# aggregate function can be used to generate the standard deviation for each subset
aggregate(data$height, by =list(data$make), FUN=sd)
# Now, let us make a set of plots to present some of the important summary of our autot dataset.
par(mfrow=c(2,2))
# Now we can make boxplot to see the heitghts of cars.
# we use the "~" to seperate the height of each car in to subsets based on their make factories (car brands)
boxplot(data$height~data$make)
# By using the attach command, we can attach the whole dataframe and access the columns as variable names, like height and make
attach(data)
# print out the make
make
# print out heights
height
# We can use the tapply function to calculate the means of each group of cars
# Here we want to calculate the mean, but subset it based on the group of their car brand.
means <- tapply(height, make, mean)
# Now, we find out the lower bound of the heights for each subset of make (car brands)
# Please note that we use here a function that we defined and inside that function we use the t.test the t test to
lower <- tapply(height, make, function(v) t.test(v)$conf.int[1])
# To understand how I get the lower bound of my data from t.test function, you can take a look on the return values that t test function returns.
# let us make a variable for the heights of toyota cars
heightsOfToyotaCars <- data$height[make=="toyota"]
# n is
length(heightsOfToyotaCars)
# then we run t.test and print out the results
t.test(heightsOfToyotaCars)
# And the following command returns the confidence intervals
# It simply includes a lower bound and upper bound interval of my data
t.test(heightsOfToyotaCars)$conf.int
# By using the following lowe bound
t.test(heightsOfToyotaCars)$conf.int[1]
# this is the higher bound
t.test(heightsOfToyotaCars)$conf.int[2]
# We just want to use this function to get the lowerbound and upperbound of the heights data to make a nice plot.
# Fot this purpose we combine it with tapply command
lower <- tapply(height, make, function(v) t.test(v)$conf.int[1])
upper <- tapply(height, make, function(v) t.test(v)$conf.int[2])
# install the package gplots
# if you have done this one time before you do not need it again.
# install.packages("gplots")
# the we need to load the library
library("gplots")
#
# click on the zoom to see the graph better.
barplot2(means, plot.ci = TRUE, ci.l = lower, ci.u =upper, names.arg = c("honda", "mazda", "toyota")
, xlab="Different Car Brands", main= "Mean Height of Cars by their brand name", ylab="Heights of Cars", col= "seegreen"
)
setwd("/media/kia/Data/Dropbox/Teaching/BU-Teaching/BU-Data-Analytics-Class/Example-Dataset/AllData/auto/")
# Load up your dataset
data <- read.csv("AutoDatahtm.csv")
# print out the column names so that you can see what is inside the dataframe
colnames(data)
# print first 4 rows of mydata
head(data, n=4)
# this command selects first the heights of all cars and then select from that only the toyota cars.
# The data is selected first based on the column name height and then based on the column name toyota.
heightsOfToyotaCars <- data$height[make=="toyota"]
heightsOfMazdaCars <- data$height[make=="mazda"]
# check the lenght of each variables that you have created
# this should return 32
length(heightsOfToyotaCars)
# This should return 12
length(heightsOfMazdaCars)
# We can use the aggregate function to generate the summary for each different make of cars, like audi, bmw, etc...
aggregate(data$height, by =list(data$make), FUN=summary)
# read more aboute the aggregate by using the ?aggregate command
# aggregate splits the data into subsets, computes summary statistics for each, and returns the result in a convenient form.
# aggregate function can be used to generate the standard deviation for each subset
aggregate(data$height, by =list(data$make), FUN=sd)
# Now, let us make a set of plots to present some of the important summary of our autot dataset.
par(mfrow=c(2,2))
# Now we can make boxplot to see the heitghts of cars.
# we use the "~" to seperate the height of each car in to subsets based on their make factories (car brands)
boxplot(data$height~data$make)
# By using the attach command, we can attach the whole dataframe and access the columns as variable names, like height and make
attach(data)
# print out the make
make
# print out heights
height
# We can use the tapply function to calculate the means of each group of cars
# Here we want to calculate the mean, but subset it based on the group of their car brand.
means <- tapply(height, make, mean)
# Now, we find out the lower bound of the heights for each subset of make (car brands)
# Please note that we use here a function that we defined and inside that function we use the t.test the t test to
lower <- tapply(height, make, function(v) t.test(v)$conf.int[1])
# To understand how I get the lower bound of my data from t.test function, you can take a look on the return values that t test function returns.
# let us make a variable for the heights of toyota cars
heightsOfToyotaCars <- data$height[make=="toyota"]
# n is
length(heightsOfToyotaCars)
# then we run t.test and print out the results
t.test(heightsOfToyotaCars)
# And the following command returns the confidence intervals
# It simply includes a lower bound and upper bound interval of my data
t.test(heightsOfToyotaCars)$conf.int
# By using the following lowe bound
t.test(heightsOfToyotaCars)$conf.int[1]
# this is the higher bound
t.test(heightsOfToyotaCars)$conf.int[2]
# We just want to use this function to get the lowerbound and upperbound of the heights data to make a nice plot.
# Fot this purpose we combine it with tapply command
lower <- tapply(height, make, function(v) t.test(v)$conf.int[1])
upper <- tapply(height, make, function(v) t.test(v)$conf.int[2])
# install the package gplots
# if you have done this one time before you do not need it again.
# install.packages("gplots")
# the we need to load the library
library("gplots")
#
# click on the zoom to see the graph better.
#barplot2(means, plot.ci = TRUE, ci.l = lower, ci.u =upper, names.arg = c("honda", "mazda", "toyota")        , xlab="Different Car Brands", main= "Mean Height of Cars by their brand name", ylab="Heights of Cars", col= "seegreen" )
setwd("/media/kia/Data/Dropbox/Teaching/BU-Teaching/BU-Data-Analytics-Class/Example-Dataset/AllData/auto/")
# Load up your dataset
data <- read.csv("AutoDatahtm.csv")
# print out the column names so that you can see what is inside the dataframe
colnames(data)
# print first 4 rows of mydata
head(data, n=4)
# this command selects first the heights of all cars and then select from that only the toyota cars.
# The data is selected first based on the column name height and then based on the column name toyota.
heightsOfToyotaCars <- data$height[make=="toyota"]
heightsOfMazdaCars <- data$height[make=="mazda"]
# check the lenght of each variables that you have created
# this should return 32
length(heightsOfToyotaCars)
# This should return 12
length(heightsOfMazdaCars)
# We can use the aggregate function to generate the summary for each different make of cars, like audi, bmw, etc...
aggregate(data$height, by =list(data$make), FUN=summary)
# read more aboute the aggregate by using the ?aggregate command
# aggregate splits the data into subsets, computes summary statistics for each, and returns the result in a convenient form.
# aggregate function can be used to generate the standard deviation for each subset
aggregate(data$height, by =list(data$make), FUN=sd)
# Now, let us make a set of plots to present some of the important summary of our autot dataset.
par(mfrow=c(2,2))
# Now we can make boxplot to see the heitghts of cars.
# we use the "~" to seperate the height of each car in to subsets based on their make factories (car brands)
boxplot(data$height~data$make)
# By using the attach command, we can attach the whole dataframe and access the columns as variable names, like height and make
attach(data)
# print out the make
make
# print out heights
height
# We can use the tapply function to calculate the means of each group of cars
# Here we want to calculate the mean, but subset it based on the group of their car brand.
means <- tapply(height, make, mean)
# Now, we find out the lower bound of the heights for each subset of make (car brands)
# Please note that we use here a function that we defined and inside that function we use the t.test the t test to
lower <- tapply(height, make, function(v) t.test(v)$conf.int[1])
# To understand how I get the lower bound of my data from t.test function, you can take a look on the return values that t test function returns.
# let us make a variable for the heights of toyota cars
heightsOfToyotaCars <- data$height[make=="toyota"]
# n is
length(heightsOfToyotaCars)
# then we run t.test and print out the results
t.test(heightsOfToyotaCars)
# And the following command returns the confidence intervals
# It simply includes a lower bound and upper bound interval of my data
t.test(heightsOfToyotaCars)$conf.int
# By using the following lowe bound
t.test(heightsOfToyotaCars)$conf.int[1]
# this is the higher bound
t.test(heightsOfToyotaCars)$conf.int[2]
# We just want to use this function to get the lowerbound and upperbound of the heights data to make a nice plot.
# Fot this purpose we combine it with tapply command
lower <- tapply(height, make, function(v) t.test(v)$conf.int[1])
upper <- tapply(height, make, function(v) t.test(v)$conf.int[2])
# install the package gplots
# if you have done this one time before you do not need it again.
# install.packages("gplots")
# the we need to load the library
library("gplots")
#
# click on the zoom to see the graph better.
#barplot2(means, plot.ci = TRUE, ci.l = lower, ci.u =upper, names.arg = c("honda", "mazda", "toyota")        , xlab="Different Car Brands", main= "Mean Height of Cars by their brand name", ylab="Heights of Cars", col= "seegreen" )
barplot2(means, plot.ci = TRUE, ci.l = lower, ci.u =upper, names.arg = c("honda", "mazda", "toyota")
, xlab="Different Car Brands", main= "Mean Height of Cars by their brand name", ylab="Heights of Cars", col= "seegreen" )
barplot2(means, plot.ci = TRUE, ci.l = lower, ci.u =upper, names.arg = c("honda", "mazda", "toyota")
, xlab="Different Car Brands", main= "Mean Height of Cars by their brand name", ylab="Heights of Cars", col= "seegreen" )
barplot2(means, plot.ci = TRUE, ci.l = lower, ci.u =upper, names.arg = c("honda", "mazda", "toyota")
, xlab="Different Car Brands", main= "Mean Height of Cars by their brand name", ylab="Heights of Cars", col= "seegreen" )
barplot2(means, plot.ci = TRUE, ci.l = lower, ci.u =upper, names.arg = c("honda", "mazda", "toyota")
, xlab="Different Car Brands", main= "Mean Height of Cars by their brand name", ylab="Heights of Cars", col= "seegreen" )
barplot2(means, plot.ci = TRUE, ci.l = lower, ci.u =upper, names.arg = c("honda", "mazda", "toyota")
, xlab="Different Car Brands", main= "Mean Height of Cars by their brand name", ylab="Heights of Cars", col= "seegreen" )
barplot2(means, plot.ci = TRUE, ci.l = lower, ci.u =upper, names.arg = c("honda", "mazda", "toyota")
, xlab="Different Car Brands", main= "Mean Height of Cars by their brand name", ylab="Heights of Cars", col= "seegreen" )
barplot2(means, plot.ci = TRUE, ci.l = lower, ci.u =upper, names.arg = c("honda", "mazda", "toyota")
, xlab="Different Car Brands", main= "Mean Height of Cars by their brand name", ylab="Heights of Cars", col= "seegreen" )
# click on the zoom to see the graph better.
barplot2(means, plot.ci = TRUE, ci.l = lower, ci.u =upper, names.arg = c("honda", "mazda", "toyota")
, xlab="Different Car Brands", main= "Mean Height of Cars by their brand name", ylab="Heights of Cars", col= "seegreen1" )
# click on the zoom to see the graph better.
barplot2(means, plot.ci = TRUE, ci.l = lower, ci.u =upper, names.arg = c("honda", "mazda", "toyota")
, xlab="Different Car Brands", main= "Mean Height of Cars by their brand name", ylab="Heights of Cars", col= "seegreen1" )
# click on the zoom to see the graph better.
barplot2(means, plot.ci = TRUE, ci.l = lower, ci.u =upper, names.arg = c("honda", "mazda", "toyota")
, xlab="Different Car Brands", main= "Mean Height of Cars by their brand name", ylab="Heights of Cars", col= "green" )
setwd("/media/kia/Data/Dropbox/Teaching/BU-Teaching/BU-Data-Analytics-Class/Example-Dataset/AllData/auto/")
# Load up your dataset
data <- read.csv("AutoDatahtm.csv")
# print out the column names so that you can see what is inside the dataframe
colnames(data)
# print first 4 rows of mydata
head(data, n=4)
# this command selects first the heights of all cars and then select from that only the toyota cars.
# The data is selected first based on the column name height and then based on the column name toyota.
heightsOfToyotaCars <- data$height[make=="toyota"]
heightsOfMazdaCars <- data$height[make=="mazda"]
# check the lenght of each variables that you have created
# this should return 32
length(heightsOfToyotaCars)
# This should return 12
length(heightsOfMazdaCars)
# We can use the aggregate function to generate the summary for each different make of cars, like audi, bmw, etc...
aggregate(data$height, by =list(data$make), FUN=summary)
# read more aboute the aggregate by using the ?aggregate command
# aggregate splits the data into subsets, computes summary statistics for each, and returns the result in a convenient form.
# aggregate function can be used to generate the standard deviation for each subset
aggregate(data$height, by =list(data$make), FUN=sd)
# Now, let us make a set of plots to present some of the important summary of our autot dataset.
par(mfrow=c(2,2))
# Now we can make boxplot to see the heitghts of cars.
# we use the "~" to seperate the height of each car in to subsets based on their make factories (car brands)
boxplot(data$height~data$make)
# By using the attach command, we can attach the whole dataframe and access the columns as variable names, like height and make
attach(data)
# print out the make
make
# print out heights
height
# We can use the tapply function to calculate the means of each group of cars
# Here we want to calculate the mean, but subset it based on the group of their car brand.
means <- tapply(height, make, mean)
# Now, we find out the lower bound of the heights for each subset of make (car brands)
# Please note that we use here a function that we defined and inside that function we use the t.test the t test to
lower <- tapply(height, make, function(v) t.test(v)$conf.int[1])
# To understand how I get the lower bound of my data from t.test function, you can take a look on the return values that t test function returns.
# let us make a variable for the heights of toyota cars
heightsOfToyotaCars <- data$height[make=="toyota"]
# n is
length(heightsOfToyotaCars)
# then we run t.test and print out the results
t.test(heightsOfToyotaCars)
# And the following command returns the confidence intervals
# It simply includes a lower bound and upper bound interval of my data
t.test(heightsOfToyotaCars)$conf.int
# By using the following lowe bound
t.test(heightsOfToyotaCars)$conf.int[1]
# this is the higher bound
t.test(heightsOfToyotaCars)$conf.int[2]
# We just want to use this function to get the lowerbound and upperbound of the heights data to make a nice plot.
# Fot this purpose we combine it with tapply command
lower <- tapply(height, make, function(v) t.test(v)$conf.int[1])
upper <- tapply(height, make, function(v) t.test(v)$conf.int[2])
# install the package gplots
# if you have done this one time before you do not need it again.
# install.packages("gplots")
# the we need to load the library
library("gplots")
#
# click on the zoom to see the graph better.
barplot2(means, plot.ci = TRUE, ci.l = lower, ci.u =upper, names.arg = c("honda", "mazda", "toyota")
, xlab="Different Car Brands", main= "Mean Height of Cars by their brand name", ylab="Heights of Cars", col= "seagreen2" )
barplot2(means, plot.ci = TRUE, ci.l = lower, ci.u =upper, names.arg = c("honda", "mazda", "toyota")
, xlab="Different Car Brands",
main= "Mean Height of Cars by their brand name", ylab="Heights of Cars", col= "seagreen2", ylim = c(0, 60) )
setwd("/media/kia/Data/Dropbox/Teaching/BU-Teaching/BU-Data-Analytics-Class/Example-Dataset/AllData/auto/")
# Load up your dataset
data <- read.csv("AutoDatahtm.csv")
# print out the column names so that you can see what is inside the dataframe
colnames(data)
# print first 4 rows of mydata
head(data, n=4)
# this command selects first the heights of all cars and then select from that only the toyota cars.
# The data is selected first based on the column name height and then based on the column name toyota.
heightsOfToyotaCars <- data$height[make=="toyota"]
heightsOfMazdaCars <- data$height[make=="mazda"]
# check the lenght of each variables that you have created
# this should return 32
length(heightsOfToyotaCars)
# This should return 12
length(heightsOfMazdaCars)
# We can use the aggregate function to generate the summary for each different make of cars, like audi, bmw, etc...
aggregate(data$height, by =list(data$make), FUN=summary)
# read more aboute the aggregate by using the ?aggregate command
# aggregate splits the data into subsets, computes summary statistics for each, and returns the result in a convenient form.
# aggregate function can be used to generate the standard deviation for each subset
aggregate(data$height, by =list(data$make), FUN=sd)
# Now, let us make a set of plots to present some of the important summary of our autot dataset.
par(mfrow=c(2,2))
# Now we can make boxplot to see the heitghts of cars.
# we use the "~" to seperate the height of each car in to subsets based on their make factories (car brands)
boxplot(data$height~data$make)
# By using the attach command, we can attach the whole dataframe and access the columns as variable names, like height and make
attach(data)
# print out the make
make
# print out heights
height
# We can use the tapply function to calculate the means of each group of cars
# Here we want to calculate the mean, but subset it based on the group of their car brand.
means <- tapply(height, make, mean)
# Now, we find out the lower bound of the heights for each subset of make (car brands)
# Please note that we use here a function that we defined and inside that function we use the t.test the t test to
lower <- tapply(height, make, function(v) t.test(v)$conf.int[1])
# To understand how I get the lower bound of my data from t.test function, you can take a look on the return values that t test function returns.
# let us make a variable for the heights of toyota cars
heightsOfToyotaCars <- data$height[make=="toyota"]
# n is
length(heightsOfToyotaCars)
# then we run t.test and print out the results
t.test(heightsOfToyotaCars)
# And the following command returns the confidence intervals
# It simply includes a lower bound and upper bound interval of my data
t.test(heightsOfToyotaCars)$conf.int
# By using the following lowe bound
t.test(heightsOfToyotaCars)$conf.int[1]
# this is the higher bound
t.test(heightsOfToyotaCars)$conf.int[2]
# We just want to use this function to get the lowerbound and upperbound of the heights data to make a nice plot.
# Fot this purpose we combine it with tapply command
lower <- tapply(height, make, function(v) t.test(v)$conf.int[1])
upper <- tapply(height, make, function(v) t.test(v)$conf.int[2])
# install the package gplots
# if you have done this one time before you do not need it again.
# install.packages("gplots")
# the we need to load the library
library("gplots")
#
# click on the zoom to see the graph better.
barplot2(means, plot.ci = TRUE, ci.l = lower, ci.u =upper, names.arg = c("honda", "mazda", "toyota")
, xlab="Different Car Brands",
main= "Mean Height of Cars by their brand name", ylab="Heights of Cars", col= "seagreen2", ylim = c(0, 60) )
hist(heightsOfToyotaCars)
hist(heightsOfToyotaCars, breaks=10)
hist(heightsOfToyotaCars, breaks=20)
hist(heightsOfToyotaCars, breaks=40)
hist(data$height)
hist(data$height)
