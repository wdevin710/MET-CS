apply(DF,2,mean+a)
apply(DF,2,mean)
apply(DF,2,function(x) mean(x))
apply(DF,2,function(x,a) mean(x+a),a)
mapply(sum, 1:4, 1:4, 1:4)
mapply(sum, 1:3, 1:3, 1:3)
apply(DF,1,sum) # Row wise sum up of DF
apply(DF,2,mean) # Column wise mean of DF
a<-5; apply(DF,2,function(x,a) mean(x+a),a)
apply(DF,1,sum) # Row wise sum up of DF
apply(DF,2,mean) # Column wise mean of DF
a<-5; apply(DF,2,function(x,a) mean(x+a),a)
apply(DF,1,sum) # Row wise sum up of DF
apply(DF,2,mean) # Column wise mean of DF
a<-5; apply(DF,2,function(x,a) mean(x+a),a)
lapply(DF, function(DF) DF/2) # List of half the the values in entire DF
lapply(DF, mean) # Mean per field
a<-5; b<- pi; lapply(DF$Age, function(x,a,b) x + a*b, a, b) # Add "a*b" to Age field
lapply(DF, function(DF) DF/2) # List of half the the values in entire DF
lapply(DF, mean) # Mean per field
a<-5; b<- pi; lapply(DF$Age, function(x,a,b) x + a*b, a, b) # Add "a*b" to Age field
sapply(DF, function(DF) DF/2) # Matrix of half the the values in entire DF
My.List <- list(str1=c("This","is","long","string"),str2=c("qwery"))
sapply(My.List, nchar) # Returns a list
DF
Student1 <- list(Name="Ed",Age=53,Weight=74,Height=175)
Student1
Student1 <- list(Name="Ed",Age=Age[1],Weight=Weight[1],Height=Height[1])
Student1
cc=1
cc=2
Student2 <- list(Name="Moe",Age=Age[cc],Weight=Weight[cc],Height=Height[cc])
Student2
Names <- c("Ed","Moe","Joe","Ned","Bo","Jake");
Names <- c("Ed","Moe","Joe","Ned","Bo","Jake")
lapply(seq_along(Names), function(x1, x2,i) { list(Name=Name[[i]],
Age=Age[[i]]) },
x1=Names, x2=Age)
Names <- c("Ed","Moe","Joe","Ned","Bo","Jake")
lapply(seq_along(Names), function(x1, x2,i) { list(Name=x1[[i]],
Age=x2[[i]]) },
x1=Names, x2=Age)
Names <- c("Ed","Moe","Joe","Ned","Bo","Jake")
lapply(seq_along(Names), function(x1, x2,i) { list(
Name=x1[[i]],
Age=x2[[i]],
Weight=x3[[i]],
Height=x4[[i]]
) },
x1=Names, x2=Age, x3=Weight, x4=Height)
Names <- c("Ed","Moe","Joe","Ned","Bo","Jake")
lapply(seq_along(Names), function(x1, x2, x3, x4,i) { list(
Name=x1[[i]],
Age=x2[[i]],
Weight=x3[[i]],
Height=x4[[i]]
) },
x1=Names, x2=Age, x3=Weight, x4=Height)
z <- lapply(seq_along(Names), function(x1, x2, x3, x4,i) {
list( Name=x1[[i]], Age=x2[[i]],
Weight=x3[[i]], Height=x4[[i]]
) },
x1=Names, x2=Age, x3=Weight, x4=Height)
z
z[[1]]
Student.List <- lapply(seq_along(Names), function(x1, x2, x3, x4,i) {
list( Name=x1[[i]], Age=x2[[i]], Weight=x3[[i]], Height=x4[[i]])
},
x1=Names, x2=Age, x3=Weight, x4=Height)
Student.List
names(Student.List)
names(Student.List) <- c("Student1","Student2","Student3","Student4","Student5","Student6")
Student.List
Student.List$Student1
Names <- c("Ed","Moe","Joe","Ned","Bo","Jake")
Student.List <- lapply(seq_along(Names), function(x1, x2, x3, x4,i) {
Student=list( Name=x1[[i]], Age=x2[[i]], Weight=x3[[i]], Height=x4[[i]])
},
x1=Names, x2=Age, x3=Weight, x4=Height)
Student.List
Student.List[[1]]
Names <- c("Ed","Moe","Joe","Ned","Bo","Jake")
Student.List <- lapply(seq_along(Names), function(x1, x2, x3, x4,i) {
list( Name=x1[[i]], Age=x2[[i]], Weight=x3[[i]], Height=x4[[i]])
},
x1=Names, x2=Age, x3=Weight, x4=Height)
names(Student.List) <- c("Student1","Student2","Student3","Student4","Student5","Student6")
Student.List
Student.List$Student1
Kg2Lb <- function(Kg) {
Lb <- Kg/2.2
}
do.call("rbind",lapply(Student.List, function(x) Kg2Lb(x$Weight) ))
Kg2Lb <- function(Kg) { Lb <- Kg*2.2 }
z <- do.call("rbind",lapply(Student.List, function(x) Kg2Lb(x$Weight) ))
z
m <- matrix(nrow=2,ncol=3) # Matrix
m1 <- matrix(1:6,nrow=2,ncol=3) # Another way to defins a Matrix
x <- 1:3; y <- 1:6;
m2 <- cbind(x,y) # Yet Another way to defins a Matrix
m3 <- rbind(x,y) # Yet Another way to defins a Matrix
?str
library("tm", lib.loc="~/R/win-library/3.3")
detach("package:tm", unload=TRUE)
m <- matrix(nrow=2,ncol=3) # Matrix
m1 <- matrix(1:6,nrow=2,ncol=3) # Another way to defins a Matrix
x <- 1:3; y <- 1:6;
m2 <- cbind(x,y) # Yet Another way to defins a Matrix
m3 <- rbind(x,y) # Yet Another way to defins a Matrix
?strheight
library("tau", lib.loc="~/R/win-library/3.3")
detach("package:tau", unload=TRUE)
remove(m)
m <- matrix(nrow=2,ncol=3)
m
m1 <- matrix(1:6,nrow=2,ncol=3)
m1
x <- 1:3; y <- 1:6;
x
y
cbind(x,y)
rbind(x,y)
lst1 <- list(myInt=1:4,myLogic=c(T,F))
View(m)
View(m1)
lst1$myInt
lst1$myLogic
lst1[1]
lst1[2]
lst1$myLogic[1]
lst1$myLogic[2]
lst1$myLogic[3]
lst1[2][1]
lst1[2]
class(lst1[2])
lst1[[2]]
lst1[[2]][1]
lst1[[2]][2]
class(lst1[[2]])
lst1[[1]
]
lst1[1]
class(lst1[1])
class(lst1[[1]])
x <- c(1, 2, NA, 4, NA, 5) #
x
is.na(x)
which( is.na(x))
which( !is.na(x))
!is.na(x)
sum(!is.na(x))
!is.na(x)
!is.na(x)*1
!is.na(x)*1.0
!is.na(x)
!is.na(x)+1
[!is.na(x)]*1
(!is.na(x))*1
bad
bad <- is.na(x)
bad
bad*1
x <- factor(c("yes","no","yes","yes"),levels=c("yes","no"))
table(x)
x1 <- factor(c("yes","no","yes","yes"),levels=c("no","yes"))
table(x1)
Pattern <- "F+"
TextData <- c("FCX", "B2Q", "BASF F", "FFF")
c("FCX", "B2Q", "BASF F", "FFF") %in% c("FCX","B2Q", "BASF")
?getwd
library("tibble", lib.loc="~/R/win-library/3.3")
detach("package:tibble", unload=TRUE)
m <- matrix(nrow=2,ncol=3) # Matrix
m
m1 <- matrix(1:6,nrow=2,ncol=3) # Another way to defins a Matrix
m1
x <- 1:3; y <- 1:6;
x
y
cbind(x,y)
rbind(x,y)
class(x)
m2 <- cbind(x,y) # Yet Another way to defins a Matrix
m3 <- rbind(x,y) #
class(m2)
Age<-c(53,32,57,23,25,38)
Weight<-c(74,62,66,47,59,99)
Height<-c(175, 166,187,197,186,197)
DF<-data.frame(Age,Weight,Height)
DF
Age<-c(53,32,57,23,25,38)
Weight<-c(74,62,66,47,59,99)
Height<-c(175, 166,187,197,186,197)
DF<-data.frame(Age,Weight,Height)
a<-5; b<- pi; lapply(DF$Age, function(x,a,b) x + a*b, a, b) # Add "a*b" to Age field
lapply(DF$Age, function(x,a,b) {d = a + 1; x + d}, a, b)
cc=0; lapply(DF$Age, function(x,a,cc) {d = a + 1; cc=cc+1; x + d + cc}, a, cc)
cc=0; lapply(DF$Age, function(x,a,cc) {d = a + 1; cc<-cc+1; x + d + cc}, a, cc)
cc=0; lapply(DF$Age, function(x,a,cc) {d = a + 1; cc<<-cc+1; x + d + cc}, a, cc)
remove(cc)
lapply(DF$Age, function(x,a,cc) {d = a + 1; cc<-cc+1; x + d + cc}, a, cc=0)
lapply(1:6, function(x,a) {d <- a + 1;  x + d}, a=DF$Age)
lapply(1:6, function(x,a) {d <- a[x] + 1;  x + d}, a=DF$Age)
lapply(1:6, function(x,a,b) {d <- a[x] + 1;  b + d}, a=DF$Age, b=10)
m <- matrix(nrow=2,ncol=3) # Matrix
# ---- R Data Type Examples -------
# Matrices ~~~~~~~~~~~~~~~~~~~
m <- matrix(nrow=2,ncol=3) # Matrix
m1 <- matrix(1:6,nrow=2,ncol=3) # Another way to defins a Matrix
x <- 1:3; y <- 1:6;
m2 <- cbind(x,y) # Yet Another way to defins a Matrix
m3 <- rbind(x,y) # Yet Another way to defins a Matrix
x <- 5
y = 6
?apply
library("tm", lib.loc="~/R/win-library/3.3")
?VCorpus
detach("package:tm", unload=TRUE)
?VCorpus
y <- c('as','bc')
class(y)
x <- 1:3; y <- 1:6;
lst1 <- list(myInt=1:4,myLogic=c(T,F))
x <- factor(c("yes","no","yes","yes"),levels=c("yes","no"))
table(x)
x <- data.frame(myInt=1:4,myLogic=c(T,T,T,F))
x
row.names(x)=c("1a","1b","1c","1d")
x
# Matrices ~~~~~~~~~~~~~~~~~~~
m <- matrix(nrow=2,ncol=3) # Matrix
m1 <- matrix(1:6,nrow=2,ncol=3) # Another way to defins a Matrix
x <- 1:3; y <- 1:6;
m2 <- cbind(x,y) # Yet Another way to defins a Matrix
m3 <- rbind(x,y)
m
x <- 1:3; y <- 1:6;
m1 <- matrix(1:6,nrow=2,ncol=3)
m1
m1[1,]
m1[1,2:3]
x <- list(myInt=1:4,myLogic=c(T,F))
x
x[1]
a <- x[1]
b <- x[[1]]
x
x$myInt
x$myInt[2]
z <- seq(-20,3, by=2)
z
?seq
z <- seq(from=-20, to=3, by=2)
y <- c("a", "b", NA, NA, "e", "f") # create data
y[complete.cases(y)]
x
x <- c(1, 2, NA, 4, NA, 5)
complete.cases(x,y)
install.packages("googleAnalyticsR")
x <- c(1, 2, NA, 4, NA, 5) #
x <- c(1, 2, NA, 4, NA, 5) #
bad <- is.na(x)
x[!bad]
x[bad]
x == NA
y <- c("a", "b", NA, NA, "e", "f")
complete.cases(y)
y[complete.cases(y)] #
complete.cases(x,y)
x + y
x <-1:4; y <-6:9
x+y
x > 2
x >= 2
y == 8
x * y
x / y
y1 <- readClipboard()
y1
y2 <- readClipboard()
y2
y1 <-  gsub("-","_",y1)
y1
y2
y2 <- paste0("ECfg_",y2
)
y2
Difference1 <- setdiff(y1,y2)
Difference2 <- setdiff(y2,y1)
Difference1
Difference2
Common <- intersect(y1,y2)
Common
writeClipboard(as.character(Common))
y <- scan()
y
Age<-c(53,32,57,23,25,38)
Weight<-c(74,62,66,47,59,99)
Height<-c(175, 166,187,197,186,197)
DF<-data.frame(Age,Weight,Height)
DF
apply(DF,1,sum)
apply(DF,2,mean)
a<-5;
apply(DF,2,function(x,a) mean(x+a),a)
lapply(DF, function(DF) DF/2)
a<-5; b<- pi; lapply(DF$Age, function(x,a,b) x + a*b, a, b)
a<-5; b<- pi; z<-lapply(DF$Age, function(x,a,b) x + a*b, a, b)
z
unlist(z)
lapply(1:6, function(x,a,b) {d <- a[x] + 1;  b + d}, a=DF$Age, b=10)
Names <- c("Ed","Moe","Joe","Ned","Bo","Jake")
Student.List <- lapply(seq_along(Names), function(x1, x2, x3, x4,i) {
list( Name=x1[[i]], Age=x2[[i]], Weight=x3[[i]], Height=x4[[i]])
},
x1=Names, x2=Age, x3=Weight, x4=Height)
Student.List
getwd()
c = 3
c
m <- matrix(nrow=2,ncol=3) # Matrix
z <- c("a", "b")
z
m <- matrix(nrow=2,ncol=3) # Matrix
m1 <- matrix(1:6,nrow=2,ncol=3)
m
m1
x <- 1:3; y <- 1:6;
x
y
m2 <- cbind(x,y) # Yet Another way to defins a Matrix
m3 <- rbind(x,y)
m2
m3
lst1 <- list(myInt=1:4,myLogic=c(T,F)) # List
lst1
lst1
lst1$myInt
lst1[[1]]
x <- factor(c("yes","no","yes","yes"),levels=c("yes","no"))
x
lst1$myInt
x1 <- list(a=list(1,2,3,4),b=c(T,F)) # create a list object "x"
x1
x1[1]
class(x1[1])
x1[2]
x1$a[[2]]
x1[c(1,2)]
x1[-2]
x <- list(myList=1:5)
x
x$m
x <- c(1, 2, NA, 4, NA, 5)
x
is.na(x)
bad <- is.na(x) # logical of NA
x[!bad]
x[x!=NA]
max(x)
Age<-c(53,32,57,23,25,38)
Weight<-c(74,62,66,47,59,99)
Height<-c(175, 166,187,197,186,197)
DF<-data.frame(Age,Weight,Height)
DF
apply(DF,1,sum)
apply(DF,2,mean)
lapply(DF, function(DF) DF/2)
a<-5; b<- pi;
lapply(DF$Age, function(x,a,b) x + a*b, a, b)
Age<-c(53,32,57,23,25,38)
Weight<-c(74,62,66,47,59,99)
Height<-c(175, 166,187,197,186,197)
DF<-data.frame(Age,Weight,Height)
Names <- c("Ed","Moe","Joe","Ned","Bo","Jake")
Student.List <- lapply(seq_along(Names), function(x1, x2, x3, x4,i) {
list( Name=x1[[i]], Age=x2[[i]], Weight=x3[[i]], Height=x4[[i]])
},
x1=Names, x2=Age, x3=Weight, x4=Height)
names(Student.List) <- c("Student1","Student2","Student3","Student4","Student5","Student6")
Student.List
Kg2Lb <- function(Kg) { Lb <- Kg*2.2 }
z <- do.call("rbind",lapply(Student.List, function(x) Kg2Lb(x$Weight) ))
z
x <- list(myInt=1:4,myLogic=c(T,F))
x
x[1]
x[[1]]
class(x[1])
class(x[[1]])
# ---- The R Apply family of functions  -------
Age<-c(53,32,57,23,25,38)
Weight<-c(74,62,66,47,59,99)
Height<-c(175, 166,187,197,186,197)
DF<-data.frame(Age,Weight,Height)
DF
lapply(DF, function(DF) DF/2)
Age<-c(53,32,57,23,25,38)
Weight<-c(74,62,66,47,59,99)
Height<-c(175, 166,187,197,186,197)
DF<-data.frame(Age,Weight,Height)
x <- factor(c("yes","no","yes","yes"),levels=c("yes","no")) # Factor
x <- factor(c("yes","no","yes","yes"),levels=c("yes","no")) # Factor
table(x)
x <- factor(c("yes","no","yes","yes"),levels=c("yes","no")) # Factor
table(x) # content count of each level (3 for "yes")
x1 <- factor(c("yes","no","yes","yes"),levels=c("no","yes")) # inverse order in levels
table(x1)
x <- data.frame(myInt=1:4,myLogic=c(T,T,T,F)) # Dataframe with specified col names
x <- data.frame(myInt=1:4,myLogic=c(T,T,T,F)) # Dataframe with specified col names
x
row.names(x)=c("1a","1b","1c","1d")
x
View(x)
View(x)
dim(x)
m <- matrix(nrow=2,ncol=3) # Matrix
m1 <- matrix(1:6,nrow=2,ncol=3) # Another way to defins a Matrix
m1[1,]
x <- list(myInt=1:4,myLogic=c(T,F)) # create a list object "x"
x
x$myLogic
x$myLogic[2]
Age<-c(53,32,57,23,25,38)
Weight<-c(74,62,66,47,59,99)
Height<-c(175, 166,187,197,186,197)
DF<-data.frame(Age,Weight,Height)
DF
View(DF)
View(DF)
Names <- c("Ed","Moe","Joe","Ned","Bo","Jake")
Student.List <- lapply(seq_along(Names), function(x1, x2, x3, x4,i) {
list( Name=x1[[i]], Age=x2[[i]], Weight=x3[[i]], Height=x4[[i]])
}, x1=Names, x2=Age, x3=Weight, x4=Height)
names(Student.List) <- c("Student1","Student2","Student3","Student4","Student5","Student6")
Student.List
a <- c("asd","qwer","zxcvb")
b <- c("qwer","asd","zxcvb","poi")
setdiff(b,a) # Difference (larger first)
intersect(a,b) # Common
Kg2Lb <- function(Kg) { Lb <- Kg*2.2 }
Kg2Lb(1)
Kg2Lb(1.2)
Kg2Lb <- function(Kg) { Lb <- Kg*2.2; return(Lb)}
Kg2Lb(1.2)
Age<-c(53,32,57,23,25,38)
Weight<-c(74,62,66,47,59,99)
Height<-c(175, 166,187,197,186,197)
DF<-data.frame(Age,Weight,Height)
DF
lapply(DF, mean)
apply(DF,2,mean)
My.List <- list(str1=c("This","is","long","string"),str2=c("qwery"))
My.List
sapply(My.List, nchar)
Names <- c("Ed","Moe","Joe","Ned","Bo","Jake")
Student.List <- lapply(seq_along(Names), function(x1, x2, x3, x4,i) {
list( Name=x1[[i]], Age=x2[[i]], Weight=x3[[i]], Height=x4[[i]])
}, x1=Names, x2=Age, x3=Weight, x4=Height)
names(Student.List) <- c("Student1","Student2","Student3","Student4","Student5","Student6")
Student.List
Names <- c("Ed","Moe","Joe","Ned","Bo","Jake")
Student.List <- lapply(seq_along(Names), function(x1, x2, x3, x4,i) {
list( Name=x1[[i]], Age=x2[[i]], Weight=x3[[i]], Height=x4[[i]])
}, x1=Names, x2=Age, x3=Weight, x4=Height)
Student.List
Names <- c("Ed","Moe","Joe","Ned","Bo","Jake")
Student.List <- lapply(seq_along(Names), function(x1, x2, x3, x4,i) {
list( Name=x1[[i]], Age=x2[[i]], Weight=x3[[i]], Height=x4[[i]])
}, x1=Names, x2=Age, x3=Weight, x4=Height)
names(Student.List) <- c("Student1","Student2","Student3","Student4","Student5","Student6")
Kg2Lb <- function(Kg) { Lb <- Kg*2.2; return(Lb)}
do.call("rbind",lapply(Student.List, function(x) Kg2Lb(x$Weight) ))
Student.List
?length
debugSource('D:/Teachng/2021/Summer/Getting Started with R/R_Code_Examples.R', encoding = 'UTF-8')
# ---- R Data Type Examples -------
# Matrices ~~~~~~~~~~~~~~~~~~~
m <- matrix(nrow=2,ncol=3) # Matrix
m1 <- matrix(1:6,nrow=2,ncol=3) # Another way to defins a Matrix
x <- 1:3; y <- 1:6;
m2 <- cbind(x,y) # Yet Another way to defins a Matrix
m3 <- rbind(x,y) # Yet Another way to defins a Matrix
library("tm", lib.loc="~/R/win-library/3.6")
detach("package:tm", unload=TRUE)
?plot
DF
debugSource('D:/Teachng/2021/Fall/Getting Started with R & Python/R_Code_Examples.R', encoding = 'UTF-8')
a <- 5
b =4
x <- factor(c("yes","no","yes","yes"),levels=c("yes","no")) # Factor
x <- factor(c("yes","no","yes","yes"),levels=c("no","yes")) # Factor
x <- factor(c("yes","no","yes","yes")) # Factor
x1 <- factor(c("yes","no","yes","yes"),levels=c("no","yes")) # inverse order in levels
table(x1)
?max
x <- c(1, 2, NA, 4, NA, 5) #
bad <- is.na(x) # logical of NA
x[!bad] # subset only the non missing data
!bad
# ---- The R Apply family of functions  -------
Age<-c(53,32,57,23,25,38)
Weight<-c(74,62,66,47,59,99)
Height<-c(175, 166,187,197,186,197)
DF<-data.frame(Age,Weight,Height)
DF
apply(DF,1,sum) # Row wise sum up of DF
apply(DF,1,sum) # Row wise sum up of DF
apply(DF,2,mean)
a<-5; apply(DF,2,function(x,a) mean(x+a),a)
?list
a= 5
