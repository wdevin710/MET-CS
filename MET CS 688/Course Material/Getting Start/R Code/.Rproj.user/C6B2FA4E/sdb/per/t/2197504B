{
    "collab_server" : "",
    "contents" : "## R Examples 1\n\n\n# ---- R Data Type Examples -------\n# Matrices ~~~~~~~~~~~~~~~~~~~\nm <- matrix(nrow=2,ncol=3) # Matrix \nm1 <- matrix(1:6,nrow=2,ncol=3) # Another way to defins a Matrix\nx <- 1:3; y <- 1:6; \nm2 <- cbind(x,y) # Yet Another way to defins a Matrix\nm3 <- rbind(x,y) # Yet Another way to defins a Matrix\n\n# Lists ~~~~~~~~~~~~~~~~~~~\n# (contain elements of different classes)\nlst1 <- list(myInt=1:4,myLogic=c(T,F)) # List \n\nlst2 <- list(a=list(1,2,3,4),b=c(T,F)) # List of a List\nz=lst2$a[[2]] # Subset element 2 from list a\n\nlst3 <- list(myList=1:5)\n\n# Factors ~~~~~~~~~~~~~~~~~~~\n# (categorical data) \nx <- factor(c(\"yes\",\"no\",\"yes\",\"yes\"),levels=c(\"yes\",\"no\")) # Factor\ntable(x) # content count of each level (3 for \"yes\")\nx1 <- factor(c(\"yes\",\"no\",\"yes\",\"yes\"),levels=c(\"no\",\"yes\")) # inverse order in levels\ntable(x1)\n\n# Dataframe ~~~~~~~~~~~~~~~~~~~\n# special type of list - Columns can be mixed classes\nx <- data.frame(myInt=1:4,myLogic=c(T,T,T,F)) # Dataframe with specified col names  \nrow.names(x)=c(\"1a\",\"1b\",\"1c\",\"1d\") # give rows a name\n\n\n\n# ---- Subsetting Examples -------\n#    [] - Always returns an object of same class \n#    [[]] - Used to extract a single element from a List or Data Frame. \n#    $ - Used to extract a List or Data Frame elements by name. \n\nm1[1,] # subsets the first row of matrix object \"m\" \n\nx <- list(myInt=1:4,myLogic=c(T,F)) # create a list object \"x\" \nx[1] # returns a List  \"1 2 3 4\"\nx[[1]] # returns integers \"1 2 3 4\" \nx$myLogic # returns \"TRUE FALSE\" \t\nx$myInt[3:4] # returns \"3 4\" from the list name \"myInt\" \nx[c(1,2)] # returns 2 List objects \"myInt and myLogic\"\n\n# Sub setting nested elements of a list (note the difference from the previous example)\nx1 <- list(a=list(1,2,3,4),b=c(T,F)) # create a list object \"x\" \nx1[1] # returns a List of 4 lists \"[1] [2] [3] [4]\"\n\n# Note: \nx1[2] # returns List \"2\" since [] is used\nx1[[1]][2] # returns element \"2\" from List \"a\", since [] is used\nx1$a[[2]] # returns element \"2\" from List \"a\" since [[]] is used \n\n# Partial Matching with [[]] - useful at command line\nx <- list(myList=1:5) # create a list object \"x\" \nx$m # returns the List  named \"myList\" by matching \"m\" to it from the available objects in the workspace. \nx[[\"m\",exact=FALSE]] # another way to achieve the same with [[]]\n\n\n# ---- Removing Missing NA from an object -------\nx <- c(1, 2, NA, 4, NA, 5) #\nbad <- is.na(x) # logical of NA\nx[!bad] # subset only the non missing data\n\n# Using function complete.cases(y). \ny <- c(\"a\", \"b\", NA, NA, \"e\", \"f\") # create data \ny[complete.cases(y)] # subset only the non missing data\n\n# Note x and y have to be of same size.\ngood <- complete.cases(x,y) # Also note that it finds the intersect of NA in x and y\n\n\n# ---- Vectorized operations -------\nx <-1:4; y <-6:9 # create 2 objects \nx+y # elementwise addition\nx > 2 # logical ( FFTT )\nx >= 2 # logical ( FTTT )\ny == 8 # logical ( FFTF )\nx * y # elementwise multiplication  \nx / y # elementwise division \n\nz <- seq(-20,3, by=2) # Creates a sequence from -20 to 3 with step 2\n\n# ---- Matrix operations -------\nx <- matrix(1:4,nrow=2,ncol=2) #  create 2x2 matrix \ny <- matrix(rep(10,4),2,2) #  create 2x2 matrix with element \"10\"\nx * y # elementwise multiplication of 2 matrices\nx / y # elementwise division of 2 matrices\nx %*% y # regular matrix multiplication \n\n\n\n\n# ---- Paths in R - Examples -------\n# --- File Import \npth <- file.path(\"c:\", \"Users\", \"ZlatkoFCX\",\"Documents\",\"FCX\",\"R Files\",\"Insert ECfg\")\nCSV.files <- list.files(pth,\".csv\") # List of files with pattern \".csv\"\nR.files <- list.files(pth,\".R\") # List of files with pattern \".R\"\nImport.Files <- file.path(pth,\"VAV007_OrigConfig.csv\") # Specific File Name to Import \nImport.Files <- file.path(pth,CSV.files[2]) # Another Way  \n\n# Ways to Import a File\ntemp.CSV <- read.csv(Import.Files,stringsAsFactors = FALSE,blank.lines.skip = TRUE,header=F)\ntemp1.CSV <- read.csv(file.path(pth,\"temp.csv\"),stringsAsFactors = FALSE,blank.lines.skip = TRUE,header=F)\n\n\n# ###--- Set Operations ----\na <- c(\"asd\",\"qwer\",\"zxcvb\")\nb <- c(\"qwer\",\"asd\",\"zxcvb\",\"poi\")\nsetdiff(b,a) # Difference (larger first)\nintersect(a,b) # Common \n\n\n# ---- Moving data between R and the clipboard  -------\n# --- Clipboard Import & Edditing \ny1 <- readClipboard() # Set 1 from \"Two_Sets_Example.xlsx\"\ny1 <-  gsub(\"-\",\"_\",y1) # Replace \"-\" with \"_\"\n\ny2 <- readClipboard() # Set 2 from \"Two_Sets_Example.xlsx\"\ny2 <- paste0(\"ECfg_\",y2) # Paste & Insert Names\n\n#--- Set Operations\nDifference1 <- setdiff(y1,y2) # What is Different in y1\nDifference2 <- setdiff(y2,y1) # What is Different in y2\nCommon <- intersect(y1,y2) # Common \n\n#--- Export to Clipboard \nwriteClipboard(as.character(Difference)) # Place it on Clipboard \nwriteClipboard(as.character(Common)) # Place it on Clipboard \n\n#--- Import Numbers from Excel \ny <- scan() \n\n\n# ---- Moving data between R and the clipboard  ------- \n\n# ---- The R Apply family of functions  ------- \nAge<-c(53,32,57,23,25,38)\nWeight<-c(74,62,66,47,59,99)\nHeight<-c(175, 166,187,197,186,197)\nDF<-data.frame(Age,Weight,Height) \n\n# 1) apply(x,Margin,FUN) Returns a vector, array or list. \napply(DF,1,sum) # Row wise sum up of DF\napply(DF,2,mean) # Column wise mean of DF\na<-5; apply(DF,2,function(x,a) mean(x+a),a)\n\n# 2) lapply(x,FUN,...) Returns a list. \nlapply(DF, function(DF) DF/2) # List of half the the values in entire DF\nlapply(DF, mean) # Mean per field\na<-5; b<- pi; lapply(DF$Age, function(x,a,b) x + a*b, a, b) # Add \"a*b\" to Age field\nlapply(DF$Age, function(x,a,cc) {d = a + 1; cc<-cc+1; x + d + cc}, a, cc=0)\nlapply(1:6, function(x,a,b) {d <- a[x] + 1;  b + d}, a=DF$Age, b=10)\n\n# 3) sapply(x,FUN,...) Returns a vector. \nsapply(DF, function(DF) DF/2) # Matrix of half the the values in entire DF\nMy.List <- list(str1=c(\"This\",\"is\",\"long\",\"string\"),str2=c(\"qwery\"))\nsapply(My.List, nchar) # Returns a list\n\n# 4) mapply(x,FUN,...) multivariate version of sapply\nv1 <- 1:3; mapply(sum, v1, v1, v1) # Elementwise Sum first (1+1+1), second, third\n# [1] 3 6 9\n\n# lapply() \nNames <- c(\"Ed\",\"Moe\",\"Joe\",\"Ned\",\"Bo\",\"Jake\") \nStudent.List <- lapply(seq_along(Names), function(x1, x2, x3, x4,i) { \n  list( Name=x1[[i]], Age=x2[[i]], Weight=x3[[i]], Height=x4[[i]]) \n}, \nx1=Names, x2=Age, x3=Weight, x4=Height)\nnames(Student.List) <- c(\"Student1\",\"Student2\",\"Student3\",\"Student4\",\"Student5\",\"Student6\")\n\nKg2Lb <- function(Kg) { Lb <- Kg*2.2 }\n\nz <- do.call(\"rbind\",lapply(Student.List, function(x) Kg2Lb(x$Weight) ))\n\n\n\n\n\n\n\n\n",
    "created" : 1517432088377.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3830030999",
    "id" : "2197504B",
    "lastKnownWriteTime" : 1539119054,
    "last_content_update" : 1539119054367,
    "path" : "~/My Files/Teachng/2019/Spring/Getting Started with R/R_Code_Examples.R",
    "project_path" : "R_Code_Examples.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}