{
    "collab_server" : "",
    "contents" : "## R Examples 1\n\n\n# ---- R Data Type Examples -------\n# Matrices ~~~~~~~~~~~~~~~~~~~\nm <- matrix(nrow=2,ncol=3) # Matrix \nm1 <- matrix(1:6,nrow=2,ncol=3) # Another way to defins a Matrix\nx <- 1:3; y <- 1:6; \nm2 <- cbind(x,y) # Yet Another way to defins a Matrix\nm3 <- rbind(x,y) # Yet Another way to defins a Matrix\n\n# Lists ~~~~~~~~~~~~~~~~~~~\n# (contain elements of different classes)\nlst1 <- list(myInt=1:4,myLogic=c(T,F)) # List \n\nlst2 <- list(a=list(1,2,3,4),b=c(T,F)) # List of a List\nz=lst2$a[[2]] # Subset element 2 from list a\n\nlst3 <- list(myList=1:5)\n\n# Factors ~~~~~~~~~~~~~~~~~~~\n# (categorical data) \nx <- factor(c(\"yes\",\"no\",\"yes\",\"yes\"),levels=c(\"yes\",\"no\")) # Factor\ntable(x) # content count of each level (3 for \"yes\")\nx1 <- factor(c(\"yes\",\"no\",\"yes\",\"yes\"),levels=c(\"no\",\"yes\")) # inverse order in levels\n\n# Dataframe ~~~~~~~~~~~~~~~~~~~\n# special type of list - Columns can be mixed classes\nx <- data.frame(myInt=1:4,myLogic=c(T,T,T,F)) # Dataframe with specified col names  \nrow.names(x)=c(\"1a\",\"1b\",\"1c\",\"1d\") # give rows a name\n\n\n\n# ---- Subsetting Examples -------\n#    [] - Always returns an object of same class \n#    [[]] - Used to extract a single element from a List or Data Frame. \n#    $ - Used to extract a List or Data Frame elements by name. \n\nm1[1,] # subsets the first row of matrix object \"m\" \n\nx <- list(myInt=1:4,myLogic=c(T,F)) # create a list object \"x\" \nx[1] # returns a List  \"1 2 3 4\"\nx[[1]] # returns integers \"1 2 3 4\" \nx$myLogic # returns \"TRUE FALSE\" \t\nx$myInt[3:4] # returns \"3 4\" from the list name \"myInt\" \nx[c(1,2)] # returns 2 List objects \"myInt and myLogic\"\n\n# Sub setting nested elements of a list (note the difference from the previous example)\nx1 <- list(a=list(1,2,3,4),b=c(T,F)) # create a list object \"x\" \nx1[1] # returns a List of 4 lists \"[1] [2] [3] [4]\"\n\n# Note: \nx1[2] # returns List \"2\" since [] is used\nx1[[1]][2] # returns element \"2\" from List \"a\", since [] is used\nx1$a[[2]] # returns element \"2\" from List \"a\" since [[]] is used \n\n# Partial Matching with [[]] - useful at command line\nx <- list(myList=1:5) # create a list object \"x\" \nx$m # returns the List  named \"myList\" by matching \"m\" to it from the available objects in the workspace. \nx[[\"m\",exact=FALSE]] # another way to achieve the same with [[]]\n    \n\n# ---- Removing Missing NA from an object -------\nx <- c(1, 2, NA, 4, NA, 5) #\nbad <- is.na(x) # logical of NA\nx[!bad] # subset only the non missing data\n\n# Using function complete.cases(y). \ny <- c(\"a\", \"b\", NA, NA, \"e\", \"f\") # create data \ny[complete.cases(y)] # subset only the non missing data\n\n# Note x and y have to be of same size.\ngood <- complete.cases(x,y) # Also note that it finds the intersect of NA in x and y\n\n\n# ---- Vectorized operations -------\nx <-1:4; y <-6:9 # create 2 objects \nx+y # elementwise addition\nx > 2 # logical ( FFTT )\nx >= 2 # logical ( FTTT )\ny == 8 # logical ( FFTF )\nx * y # elementwise multiplication  \nx / y # elementwise division \n\n\n# ---- Matrix operations -------\nx <- matrix(1:4,nrow=2,ncol=2) #  create 2x2 matrix \ny <- matrix(rep(10,4),2,2) #  create 2x2 matrix with element \"10\"\nx * y # elementwise multiplication of 2 matrices\nx / y # elementwise division of 2 matrices\nx %*% y # regular matrix multiplication \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1517431828913.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "743437084",
    "id" : "E14CD97D",
    "lastKnownWriteTime" : 1460407907,
    "last_content_update" : 1460407907,
    "path" : "~/My Files/Teachng/2019/Spring/Getting Started with R/FCX_Examples_1.R",
    "project_path" : "FCX_Examples_1.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}