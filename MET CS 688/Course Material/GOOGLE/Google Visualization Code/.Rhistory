library(googleVis)
student.data = data.frame(
Student = c("Alice", "Bob", "Charlie", "Dave", "Ed"),
Exam = c(90, 80, 60, 85, 75),
Quiz = c(8, 6, 9, 7, 10))
chart11 <-
gvisComboChart(student.data,
xvar="Student",
yvar=c("Exam", "Quiz"),
options=list(seriesType="bars",
series='{1: {type:"line"}}'))
plot(chart11)
student.data
chart4 <-
gvisLineChart(student.data,
xvar = "Student",
yvar = c("Exam","Quiz"),
options=list(
series="[{targetAxisIndex: 0},
{targetAxisIndex:1}]",
vAxes="[{title:'Exam'}, {title:'Quiz'}]",
gvis.editor="Edit me!"))
plot(chart4)
library("googleVis")
library(RCurl)
library(RJSONIO)
webpage <-
paste0("http://powerful-meadow-8588.herokuapp.com/",
"data/12months_departures_joiners.json", sep="")
data <- fromJSON(getURL(webpage))
data <- fromJSON(getURL(webpage))
library("googleVis")
library(RCurl)
library(RJSONIO)
webpage <-
paste0("http://powerful-meadow-8588.herokuapp.com/",
"data/12months_departures_joiners.json", sep="")
data <- fromJSON(getURL(webpage))
library("googleVis")
library(RCurl)
library(RJSONIO)
webpage <-
paste0("http://powerful-meadow-8588.herokuapp.com/",
"data/12months_departures_joiners.json", sep="")
data <- fromJSON(getURL(webpage))
file.edit('~/.Renviron')
library("googleVis")
library(RCurl)
library(RJSONIO)
webpage <-
paste0("http://powerful-meadow-8588.herokuapp.com/",
"data/12months_departures_joiners.json", sep="")
data <- fromJSON(getURL(webpage))
library("googleVis")
install.packages("RCurl")
library(RCurl)
library(RJSONIO)
webpage <- paste0("http://powerful-meadow-8588.herokuapp.com/",
"data/12months_departures_joiners.json", sep="")
data <- fromJSON(getURL(webpage))
options(internet.info = 0)
webpage
getURL(webpage)
file.edit('~/.Renviron')
library(downloader)
install.packages("RCurl", repos = NULL, type = "source")
library(RCurl)
webpage
fromJSON(getURL(webpage))
install.packages("downloader", repos = NULL, type = "source")
fromJSON(getURL(webpage))
z<-download(webpage)
library(downloader)
install.packages("downloader", repos = NULL, type = "source")
install.packages("downloader")
library(downloader)
z<-download(webpage)
download(webpage,"Glitch.data")
fromJSON(getURL(webpage))
library(devtools)
install.packages("devtools")
library(devtools)
data <- fromJSON(getURL(webpage))
install_github("twitteR", username="geoffjentry")
webpage <- paste0("https://powerful-meadow-8588.herokuapp.com/",
"data/12months_departures_joiners.json", sep="")
data <- fromJSON(getURL(webpage))
download.file(url="http://curl.haxx.se/ca/cacert.pem", destfile="cacert.pem")
download(webpage,"Glitch.data")
webpage
webpage <- paste0("http://powerful-meadow-8588.herokuapp.com/",
"data/12months_departures_joiners.json", sep="")
download(webpage,"Glitch.data")
download.file(webpage,"Glitch.data")
webpage
download.file(url="http://powerful-meadow-8588.herokuapp.com/data/12months_departures_joiners.json", destfile="Glitch_data")
load(file="glitch1.RData")
typeof(data)
names(data)
typeof(data$nodes)
length(data$nodes)
typeof(data)
names(data) # "nodes" & "links"
typeof(data$nodes)
length(data$nodes) # 89 nodes
# Concatenate Nodes list of data frames into a single data frame
# using the do.call() function
nodes.info <-
do.call("rbind",
lapply(data$nodes, data.frame))
head(nodes.info)
tail(nodes.info)
months <- unique(nodes.info$month)
table(nodes.info$month)
levels <- unique(nodes.info$name)
# Concatenate Links list of data frames into a single data frame
links.info <-
data.frame(do.call("rbind", data$links))
head(links.info)
links.info$SourceName <-
paste0(links.info$source, "-",
nodes.info[links.info$source+1, "name"])
links.info$TargetName <-
paste0(links.info$target, "-",
nodes.info[links.info$target+1, "name"])
TP <- aggregate(nodes.info$joining,by = list(nodes.info$month), FUN = "sum")
TP
names(TP) <- c("Month","Joining")
TP
TP
# a)  Using the aggregate function, compute the data frame for the total players joining each month.
TP <- aggregate(nodes.info$joining,by = list(nodes.info$month), FUN = "sum")
#     Name the columns as Month and Joining.
names(TP) <- c("Month","Joining")
# b)	Using the aggregate function, compute the data frame for the total players departing each month. Names the columns as Month and Departing.
TP1 <- aggregate(nodes.info$departing,by = list(nodes.info$month), FUN = "sum")
#     Name the columns as Month and Joining.
names(TP1) <- c("Month","Departing")
# c)	Merge the two data frames by Month column with sort option as FALSE.
Merged.data <- merge(TP, TP1, sort=FALSE)
Merged.data
chart1 <- gvisLineChart(Merged.data)
plot(chart1)
# and Google Column chart.
chart2 <- gvisColumnChart(Merged.data)
plot(chart2)
# Merge the two into a single chart.
chart12 <- gvisMerge(chart1,chart2,horizontal=TRUE)
plot(chart12)
chart3 <- gvisGauge(Merged.data,options=list(min=0, max=4030))
plot(chart3)
# green range 0 - 1000, yellow range 1000 - 2000, and the red range 2000 - 4030.
chart4 <- gvisGauge(Merged.data,
options=list(min=0, max=4030,
redFrom=2000, redTo=4030,
yellowFrom=1000, yellowTo=2000,
greenFrom=0, greenTo=1000,
width=400, height=300))
plot(chart4)
library(googleVis)
library(SportsAnalytics)
install.packages("SportsAnalytics")
nba1314 <- fetch_NBAPlayerStatistics("13-14")
library(SportsAnalytics)
nba1314 <- fetch_NBAPlayerStatistics("13-14")
GetBest <- function(data.values) {
data.values[!is.finite(data.values)] <- 0 # Relace "NaN" with "0"
MaxVal <- max(data.values, na.rm=TRUE) # Get Max Value
indx <- data.values==MaxVal # Get Indices
return(indx)
}
FPp <- nba1314$FieldGoalsMade/nba1314$FieldGoalsAttempted*100  # field point percentage
indx<-GetBest(FPp)
nba1314[indx,]$Name # "Andris Biedrins - 48" "Deandre Liggins - 273"
nba1314[indx,]$Name # "Andris Biedrins - 48" "Deandre Liggins - 273"
nba1314[indx,]$Name
nba1314[indx,]$Name
typeof(nba1314)
names(nba1314)
names(nba1314)
FTp <- nba1314$FreeThrowsMade/nba1314$FreeThrowsAttempted*100 # free throw percentage
indx<-GetBest(FTp)
nba1314[indx,]$Name
indx
FTp <- nba1314$FreeThrowsMade/nba1314$FreeThrowsAttempted*100 # free throw percentage
indx<-GetBest(FTp)
nba1314[indx,]$Name
library("googleVis")
library(RCurl)
library(RJSONIO)
webpage <- paste0("http://powerful-meadow-8588.herokuapp.com/",
"data/12months_departures_joiners.json", sep="")
data <- fromJSON(getURL(webpage))
data(BostonHousing)
library("googleVis")
library(RCurl)
library(RJSONIO)
webpage <- paste0("http://powerful-meadow-8588.herokuapp.com/",
"data/12months_departures_joiners.json", sep="")
data <- fromJSON(getURL(webpage))
library(googleVis)
library(SportsAnalytics)
# a)  Retrieve the NBA data for the 13-14 season.
nba1314 <- fetch_NBAPlayerStatistics("13-14")
library("googleVis")
library(RCurl)
library(RJSONIO)
library(googleVis)
library(SportsAnalytics)
# a)  Retrieve the NBA data for the 13-14 season.
nba1314 <- fetch_NBAPlayerStatistics("13-14")
# a)  Retrieve the NBA data for the 13-14 season.
nba1314 <- fetch_NBAPlayerStatistics("07-08")
names(nba1314)
nba1314$Name
names(nba1314)
library(googleVis); library(XML); library(stringr)
webpage <- paste0("http://www.landofbasketball.com/",
"championships/year_by_year.htm")
data <- readHTMLTable(webpage,which = 1,
stringsAsFactors = FALSE)
names(data) <- c("Input")
names(data)
# extracting the data into multiple columns
data$Split <- strsplit(data$Input, split='(\n|\t)')
data[1, "Split"]
data$Year <- sapply(data$Split,FUN = function (x) substr(x[[1]], 3, 7))
data$Winner <- sapply(data$Split,FUN = function (x) str_trim(x[[5]]))
data$Series <- sapply(data$Split,FUN = function (x) str_trim(x[[7]]))
data$Opponent <- sapply(data$Split,FUN = function (x) str_trim(x[[8]]))
data1<-data
data1$Split <- NULL
data1$Input <- NULL
data$Input <- NULL
chart3 <- gvisTable(data1,options=list(height=500))
plot(chart3)
source('~/My Files/Teachng/2017/Fall/Classroom/Class 9/Code/SportsAnalytics_Code.R')
source('~/My Files/Teachng/2017/Fall/Classroom/Class 9/Code/SportsAnalytics_Code.R')
source('~/My Files/Teachng/2017/Fall/Classroom/Class 9/Code/SportsAnalytics_Code.R')
library(googleVis)
library(RCurl)
library(RJSONIO)
# webpage <- paste0("http://powerful-meadow-8588.herokuapp.com/",
#          "data/12months_departures_joiners.json", sep="")
#
# data <- fromJSON(getURL(webpage))
##
# save(data, file="glitch1.RData")
load(file="glitch1.RData")
typeof(data)
names(data)
library(googleVis)
# Line Chart
student.data = data.frame(
Student = c("Alice", "Bob", "Charlie", "Dave", "Ed"),
Exam = c(90, 80, 60, 85, 75),
Quiz = c(8, 6, 9, 7, 10))
student.data
