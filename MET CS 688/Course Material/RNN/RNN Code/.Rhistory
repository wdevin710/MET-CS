# RSNNS Examples
# ftp://ftp.sas.com/pub/neural/FAQ2.html#A_art - genaral nunet info
library("RSNNS", lib.loc="~/R/win-library/3.2")
# demo() # See all the demos in R
# Load the Data (more data @  http://sci2s.ugr.es/keel/datasets.php)
data("snnsData")
laser <- snnsData$laser_1000.pat
# Spliting the Data
inputs <- laser[,inputColumns(laser)] # Extracts all columns from a matrix whose column names begin with "in"
targets <- laser[,outputColumns(laser)] # Extracts all columns from a matrix whose column names begin with "out"
# Split the input data (1000) into train (850) and test (150) specified by the argument ratio=0.15
patterns <- splitForTrainingAndTest(inputs, targets, ratio = 0.15)
# TrainData <- data.frame(Train=patterns$inputsTrain,Target=patterns$targetsTrain)
# TestData <- data.frame(Train=patterns$inputsTest,Target=patterns$targetsTest)
# write.csv(TrainData,file = "Laser Train Data.csv",row.names = FALSE)
# write.csv(TestData,file = "Laser Test Data.csv",row.names = FALSE)
# Plot the data
plot(c(0,100),c(0,0.8),type = "n",xlab = "Index", ylab = "Values",main = "Data")
lines(inputs[1:100],col="black",lwd=2.5) # Plot Data 1
lines(targets[1:100],col="blue",lwd=2.5) # Plot Data 2
legend(0.0,0.8, # places a legend at the appropriate place
c("inputs","targets"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),col=c("black","blue")) # gives the legend lines the correct color and width
plot(c(0,100),c(0,0.8),type = "n",xlab = "Index", ylab = "Values",main = "Data")
lines(inputs[1:100],col="black",lwd=2.5) # Plot Data 1
lines(targets[1:100],col="blue",lwd=2.5) # Plot Data 2
legend(0.0,0.8, # places a legend at the appropriate place
c("inputs","targets"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),col=c("black","blue")) # gives the legend lines the correct color and width
model <- elman(patterns$inputsTrain, patterns$targetsTrain,
size = c(8, 8), learnFuncParams = c(0.1), maxit = 500,
inputsTest = patterns$inputsTest, targetsTest = patterns$targetsTest,
linOut = FALSE)
# input data and fitted values can be visualized in the following way:
# Plot the data
plot(c(0,100),c(0,0.9),type = "n",xlab = "Index", ylab = "Values",main = "Data")
lines(inputs[1:100],col="black",lwd=2.5) # Plot Data 1 - Train
lines(targets[1:100],col="blue",lwd=2.5) # Plot Data 2 - Targets
lines(model$fitted.values[1:100], col = "red",lwd=2.5)  # Plot Data 3 predicted
legend(2.5,0.9, # places a legend at the appropriate place
c("inputs","targets","modeled"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),col=c("black","blue","red")) # gives the legend lines the correct color and width
plot(c(0,150),c(0,0.9),type = "n",xlab = "Index", ylab = "Values",main = "Data")
# lines(inputs[1:100],col="black",lwd=2.5) # Plot Data 1 - Train
lines(targets[851:1000],col="blue",lwd=2.5) # Plot Data 2 - Targets
lines(model$fittedTestValues, col = "red",lwd=2.5)  # Plot Data 3 predicted
legend(2.5,0.9, # places a legend at the appropriate place
c("Test targets","Test modeled"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),col=c("blue","red")) # gives the legend lines the correct color and width
# Plot Errors
# Regression plot for the training data, showing an optimal linear fit (black), and linear fit to the training data (red).
plotRegressionError(patterns$targetsTrain, model$fitted.values)
# Regression plot for the test data.
plotRegressionError(patterns$targetsTest, model$fittedTestValues)
library("tm")
library(tm.plugin.webmining) # Framework for text mining.
install.packages("tm.plugin.webmining")
library("tm")
library(tm.plugin.webmining) # Framework for text mining.
result <- WebCorpus(GoogleNewsSource("Web Analytics"))
install.packages("rJava")
library("tm.plugin.webmining")
install.packages("tm.plugin.webmining")
result <- WebCorpus(GoogleNewsSource("Web Analytics"))
library(tm.plugin.webmining)
system("java -version")
install.packages("rJava")
library("tm")
library("tm.plugin.webmining")
googlenews <- WebCorpus(GoogleNewsSource("US economy", since="1-1-2015", until="31-1-2015"))
result <- WebCorpus(GoogleNewsSource("Web Analytics"))
result <- WebCorpus(YahooNewsSource("Web Analytics"))
# RSNNS Examples
# ftp://ftp.sas.com/pub/neural/FAQ2.html#A_art - genaral nunet info
library("RSNNS", lib.loc="~/R/win-library/3.2")
# demo() # See all the demos in R
# Load the Data (more data @  http://sci2s.ugr.es/keel/datasets.php)
data("snnsData")
laser <- snnsData$laser_1000.pat
plot(laser)
plot(snnsData$laser_1000.pat)
dim(laser)
laser
plot(laser[,1])
plot(laser[,2])
source('~/My Files/Teachng/2016/CS688 Fall/Classroom/Class 8/Code/NuNet.Regression.R', echo=TRUE)
lines(laser[,1])
library("RSNNS", lib.loc="~/R/win-library/3.2")
# demo() # See all the demos in R
# Load the Data (more data @  http://sci2s.ugr.es/keel/datasets.php)
data("snnsData")
laser <- snnsData$laser_1000.pat
# Spliting the Data
inputs <- laser[,inputColumns(laser)] # Extracts all columns from a matrix whose column names begin with "in"
targets <- laser[,outputColumns(laser)] # Extracts all columns from a matrix whose column names begin with "out"
# Split the input data (1000) into train (850) and test (150) specified by the argument ratio=0.15
patterns <- splitForTrainingAndTest(inputs, targets, ratio = 0.15)
library(XML)
HTML.dataset <- list.files(dir,pattern ="html") # List of all saved HTML files @ location "dir"
#
Pattern <- "F+"
TextData <- c("FCX", "B2Q", "BASF F", "FFF")
grep(Pattern, TextData, perl=TRUE, value=FALSE)
grepl(Pattern, TextData, perl=TRUE)
regexpr(Pattern, TextData, perl=TRUE)
gregexpr(Pattern, TextData, perl=TRUE)
library("tm")
Doc1 <- "From: ritterbus001@wcsub.ctstateu.edu"
Doc2 <- "Subject: Re: IR remote control receiver"
Doc3 <- "Nntp-Posting-Host: wcsub.ctstateu.edu"
Doc4 <- "Organization: Yale University, Department of Computer Science, New Haven, CT"
Doc5 <- "In article <wb9omc.735429954@dynamo.ecn.purdue.edu>, wb9omc@dynamo.ecn.purdue.edu (Duane P Mantick) writes:"
doc <- c(Doc1,Doc2,Doc3,Doc4,Doc5) # Merge all text
Doc.Corpus <- Corpus(VectorSource(doc))
Doc.Corpus[[1]]$meta
length(Doc.Corpus)
Subject.List <- list();
ff=1
TextLine <- unlist(Doc.Corpus[[ff]][1])
TextLine
(grepl("Subject:",TextLine))
doc <- c(Doc1,Doc2,Doc3,Doc4,Doc5) # Merge all text
Doc.Corpus <- Corpus(VectorSource(doc))
Doc.Corpus[[1]]$meta
# Preprocessing -- Create corpus only from the "Subject:" line
Subject.List <- list();
for (ff in 1:length(Doc.Corpus)) {
TextLine <- unlist(Doc.Corpus[[ff]][1])
if (grepl("Subject:",TextLine)) {
Subject.List[ff] <- gsub("Subject: ","",TextLine)
Doc.Corpus[[1]]$meta$Subject <- gsub("Subject: ","",TextLine)
}
}
Doc.Corpus[[1]]$meta$Subject
as.matrix(DocumentTermMatrix(corpus.temp))
as.matrix(DocumentTermMatrix(Doc.Corpus))
which(TextData != "B2Q")
Pattern <- "F+"
TextData <- c("FCX", "B2Q", "BASF F", "FFF")
Pattern
TextData
grep(Pattern, TextData, perl=TRUE, value=FALSE)
class(grep(Pattern, TextData, perl=TRUE, value=FALSE))
grepl(Pattern, TextData, perl=TRUE)
class(grepl(Pattern, TextData, perl=TRUE))
TextData(grepl(Pattern, TextData, perl=TRUE))
TextData[grepl(Pattern, TextData, perl=TRUE)]
regexpr(Pattern, TextData, perl=TRUE)
regexpr(Pattern, TextData, perl=TRUE)
gregexpr(Pattern, TextData, perl=TRUE)
gregexpr(Pattern, TextData, perl=TRUE)
library("tm")
Doc1 <- "From: ritterbus001@wcsub.ctstateu.edu"
Doc2 <- "Subject: Re: IR remote control receiver"
Doc3 <- "Nntp-Posting-Host: wcsub.ctstateu.edu"
Doc4 <- "Organization: Yale University, Department of Computer Science, New Haven, CT"
Doc5 <- "In article <wb9omc.735429954@dynamo.ecn.purdue.edu>, wb9omc@dynamo.ecn.purdue.edu (Duane P Mantick) writes:"
doc <- c(Doc1,Doc2,Doc3,Doc4,Doc5) # Merge all text
Doc.Corpus <- Corpus(VectorSource(doc))
Doc.Corpus
Doc.Corpus[[1]]$meta$author
Doc.Corpus[[1]]$meta
Subject.List <- list();
length(Doc.Corpus)
ff=1
debugSource('~/My Files/Teachng/2017/Fall/Classroom/Class 5/Code/Corpus Manipulation.R')
ff
TextLine
ff
TextLine
TextLine
Subject.List[ff]
TextLine
# Preprocessing -- Create corpus only from the "Subject:" line
Subject.List <- list();
for (ff in 1:length(Doc.Corpus)) {
TextLine <- unlist(Doc.Corpus[[ff]][1])
if (grepl("Subject:",TextLine)) {
Subject.List[ff] <- gsub("Subject: ","",TextLine)
Doc.Corpus[[1]]$meta$Subject <- gsub("Subject: ","",TextLine)
}
}
Doc.Corpus[[1]]$meta$Subject
library("RSNNS", lib.loc="~/R/win-library/3.2")
# demo() # See all the demos in R
# Load the Data (more data @  http://sci2s.ugr.es/keel/datasets.php)
data("snnsData")
laser <- snnsData$laser_1000.pat
inputs <- laser[,inputColumns(laser)] # Extracts all columns from a matrix whose column names begin with "in"
targets <- laser[,outputColumns(laser)] # Extracts all columns from a matrix whose column names begin with "out"
# Split the input data (1000) into train (850) and test (150) specified by the argument ratio=0.15
patterns <- splitForTrainingAndTest(inputs, targets, ratio = 0.15)
inputs
patterns
plot(c(0,100),c(0,0.8),type = "n",xlab = "Index", ylab = "Values",main = "Data")
lines(inputs[1:100],col="black",lwd=2.5) # Plot Data 1
lines(targets[1:100],col="blue",lwd=2.5) # Plot Data 2
legend(0.0,0.8, # places a legend at the appropriate place
c("inputs","targets"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),col=c("black","blue")) # gives the legend lines the correct color and width
model <- elman(patterns$inputsTrain, patterns$targetsTrain,
size = c(8, 8), learnFuncParams = c(0.1), maxit = 500,
inputsTest = patterns$inputsTest, targetsTest = patterns$targetsTest,
linOut = FALSE)
library(XML)
HTML.dataset <- list.files(dir,pattern ="html") # List of all saved HTML files @ location "dir"
# Function to strip the table data from the HTML files
sieve.HTML <- function(URL) {
table <- readHTMLTable(URL) # Read HTML table into a list
}
temp.HTML.text <- lapply(HTML.dataset,function(x) sieve.HTML(x)) # Get all the text from the saved HTMLs
library("tm")
Doc1 <- "From: ritterbus001@wcsub.ctstateu.edu"
Doc2 <- "Subject: Re: IR remote control receiver"
Doc3 <- "Nntp-Posting-Host: wcsub.ctstateu.edu"
Doc4 <- "Organization: Yale University, Department of Computer Science, New Haven, CT"
Doc5 <- "In article <wb9omc.735429954@dynamo.ecn.purdue.edu>, wb9omc@dynamo.ecn.purdue.edu (Duane P Mantick) writes:"
doc <- c(Doc1,Doc2,Doc3,Doc4,Doc5) # Merge all text
Doc.Corpus <- Corpus(VectorSource(doc))
Doc.Corpus[[1]]$meta
doc <- c(Doc1,Doc2,Doc3,Doc4,Doc5) # Merge all text
Doc.Corpus <- Corpus(VectorSource(doc))
Doc.Corpus[[1]]$content
doc <- c(Doc1,Doc2,Doc3,Doc4,Doc5) # Merge all text
Doc.Corpus <- Corpus(VectorSource(doc))
Doc.Corpus[[2]]$content
library("tm")
Doc1 <- "From: ritterbus001@wcsub.ctstateu.edu"
Doc2 <- "Subject: Re: IR remote control receiver"
Doc3 <- "Nntp-Posting-Host: wcsub.ctstateu.edu"
Doc4 <- "Organization: Yale University, Department of Computer Science, New Haven, CT"
Doc5 <- "In article <wb9omc.735429954@dynamo.ecn.purdue.edu>, wb9omc@dynamo.ecn.purdue.edu (Duane P Mantick) writes:"
doc <- c(Doc1,Doc2,Doc3,Doc4,Doc5) # Merge all text
doc
Doc.Corpus <- Corpus(VectorSource(doc))
Doc.Corpus[[1]]$content
Doc.Corpus[[2]]$content
Doc.Corpus[[1]]$meta
Subject.List <- list();
Subject.List
length(Doc.Corpus)
ff =1
debugSource('~/My Files/Teachng/2018/Spring/Classroom/Class 5/Code/Corpus Manipulation.R')
ff
TextLine
grepl("Subject:",TextLine)
grep("Subject:",TextLine)
ff
TextLine
Doc.Corpus[[1]]$meta
Doc.Corpus[[1]]$meta
debugSource('~/My Files/Teachng/2018/Spring/Classroom/Class 5/Code/Corpus Manipulation.R')
rm(list=ls()); cat("\014") # clear all
library("tm")
Doc1 <- "From: ritterbus001@wcsub.ctstateu.edu"
Doc2 <- "Subject: Re: IR remote control receiver"
Doc3 <- "Nntp-Posting-Host: wcsub.ctstateu.edu"
Doc4 <- "Organization: Yale University, Department of Computer Science, New Haven, CT"
Doc5 <- "In article <wb9omc.735429954@dynamo.ecn.purdue.edu>, wb9omc@dynamo.ecn.purdue.edu (Duane P Mantick) writes:"
doc <- c(Doc1,Doc2,Doc3,Doc4,Doc5) # Merge all text
Doc.Corpus <- VCorpus(VectorSource(doc))
Doc.Corpus[[1]]$meta
Subject.List <- list();
for (ff in 1:length(Doc.Corpus)) {
TextLine <- unlist(Doc.Corpus[[ff]][1])
if (grepl("Subject:",TextLine)) {
Subject.List[ff] <- gsub("Subject: ","",TextLine)
Doc.Corpus[[1]]$meta$Subject <- gsub("Subject: ","",TextLine)
}
}
Doc.Corpus[[1]]$meta$Subject
Doc.Corpus[[2]]$meta$Subject
Doc.Corpus[[3]]$meta$Subject
Subject.List <- list();
TextLine
rbind(Subject.List,TextLine)
Subject.List
rm(list=ls()); cat("\014") # clear all
library("tm")
Doc1 <- "From: ritterbus001@wcsub.ctstateu.edu"
Doc2 <- "Subject: Re: IR remote control receiver"
Doc3 <- "Nntp-Posting-Host: wcsub.ctstateu.edu"
Doc4 <- "Organization: Yale University, Department of Computer Science, New Haven, CT"
Doc5 <- "In article <wb9omc.735429954@dynamo.ecn.purdue.edu>, wb9omc@dynamo.ecn.purdue.edu (Duane P Mantick) writes:"
doc <- c(Doc1,Doc2,Doc3,Doc4,Doc5) # Merge all text
Doc.Corpus <- VCorpus(VectorSource(doc))
Doc.Corpus[[1]]$meta
# Preprocessing -- Create corpus only from the "Subject:" line
Subject.List <- list(); cc <- 0
for (ff in 1:length(Doc.Corpus)) {
TextLine <- unlist(Doc.Corpus[[ff]][1])
if (grepl("Subject:",TextLine)) {
cc <- cc +1
Subject.List[cc] <- gsub("Subject: ","",TextLine)
Doc.Corpus[[ff]]$meta$Subject <- gsub("Subject: ","",TextLine)
}
}
Doc.Corpus[[2]]$meta$Subject
Subject.List
?VCorpus
rm(list=ls()); cat("\014") # clear all
library("tm")
Doc1 <- "From: ritterbus001@wcsub.ctstateu.edu"
Doc2 <- "Subject: Re: IR remote control receiver"
Doc3 <- "Nntp-Posting-Host: wcsub.ctstateu.edu"
Doc4 <- "Organization: Yale University, Department of Computer Science, New Haven, CT"
Doc5 <- "In article <wb9omc.735429954@dynamo.ecn.purdue.edu>, wb9omc@dynamo.ecn.purdue.edu (Duane P Mantick) writes:"
doc <- c(Doc1,Doc2,Doc3,Doc4,Doc5) # Merge all text
Doc.Corpus <- VCorpus(VectorSource(doc))
Doc.Corpus[[1]]$meta
debugSource('~/My Files/Teachng/2018/Summer/Classroom/Class 5/Code/Subject Line.R')
ff
length(Doc.Corpus)
TextLine
doc
oc.Corpus[[ff]]
Doc.Corpus[[ff]]
Doc.Corpus[[ff]][1]
TextLine
(grepl("Subject:",TextLine))
ff
TextLine
TextLine
TextLine
Subject.List[cc]
ff
Doc.Corpus[[ff]]$meta$Subject
Doc.Corpus[[ff-1]]$meta$Subject
library("RSNNS", lib.loc="~/R/win-library/3.2")
# demo() # See all the demos in R
# Load the Data (more data @  http://sci2s.ugr.es/keel/datasets.php)
data("snnsData")
laser <- snnsData$laser_1000.pat
head(laser)
# Spliting the Data
inputs <- laser[,inputColumns(laser)] # Extracts all columns from a matrix whose column names begin with "in"
targets <- laser[,outputColumns(laser)] # Extracts all columns from a matrix whose column names begin with "out"
# Split the input data (1000) into train (850) and test (150) specified by the argument ratio=0.15
patterns <- splitForTrainingAndTest(inputs, targets, ratio = 0.15)
names(patterns)
head(patterns)
plot(c(0,100),c(0,0.8),type = "n",xlab = "Index", ylab = "Values",main = "Data")
lines(inputs[1:100],col="black",lwd=2.5) # Plot Data 1
lines(targets[1:100],col="blue",lwd=2.5) # Plot Data 2
legend(0.0,0.8, # places a legend at the appropriate place
c("inputs","targets"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),col=c("black","blue")) # gives the legend lines the correct color and width
plot(c(0,100),c(0,0.8),type = "n",xlab = "Index", ylab = "Values",main = "Data")
lines(inputs[1:100],col="black",lwd=2.5) # Plot Data 1
lines(targets[1:100],col="blue",lwd=2.5) # Plot Data 2
legend(0.0,0.8, # places a legend at the appropriate place
c("inputs","targets"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),col=c("black","blue")) # gives the legend lines the correct color and width
# input data and fitted values can be visualized in the following way:
# Plot the data
plot(c(0,100),c(0,0.9),type = "n",xlab = "Index", ylab = "Values",main = "Data")
lines(inputs[1:100],col="black",lwd=2.5) # Plot Data 1 - Train
lines(targets[1:100],col="blue",lwd=2.5) # Plot Data 2 - Targets
lines(model$fitted.values[1:100], col = "red",lwd=2.5)  # Plot Data 3 predicted
legend(2.5,0.9, # places a legend at the appropriate place
c("inputs","targets","modeled"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),col=c("black","blue","red")) # gives the legend lines the correct color and width
### ---- Example: 1. Regression with recurrent neural networks  ----
# The use of an Elman network (Elman 1990) for time series regression.
model <- elman(patterns$inputsTrain, patterns$targetsTrain,
size = c(8, 8), learnFuncParams = c(0.1), maxit = 500,
inputsTest = patterns$inputsTest, targetsTest = patterns$targetsTest,
linOut = FALSE)
plot(c(0,100),c(0,0.9),type = "n",xlab = "Index", ylab = "Values",main = "Data")
lines(inputs[1:100],col="black",lwd=2.5) # Plot Data 1 - Train
lines(targets[1:100],col="blue",lwd=2.5) # Plot Data 2 - Targets
lines(model$fitted.values[1:100], col = "red",lwd=2.5)  # Plot Data 3 predicted
legend(2.5,0.9, # places a legend at the appropriate place
c("inputs","targets","modeled"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),col=c("black","blue","red")) # gives the legend lines the correct color and width
plot(c(0,150),c(0,0.9),type = "n",xlab = "Index", ylab = "Values",main = "Data")
# lines(inputs[1:100],col="black",lwd=2.5) # Plot Data 1 - Train
lines(targets[851:1000],col="blue",lwd=2.5) # Plot Data 2 - Targets
lines(model$fittedTestValues, col = "red",lwd=2.5)  # Plot Data 3 predicted
legend(2.5,0.9, # places a legend at the appropriate place
c("Test targets","Test modeled"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),col=c("blue","red")) # gives the legend lines the correct color and width
# ftp://ftp.sas.com/pub/neural/FAQ2.html#A_art - genaral nunet info
library("RSNNS", lib.loc="~/R/win-library/3.2")
# demo() # See all the demos in R
# Load the Data (more data @  http://sci2s.ugr.es/keel/datasets.php)
data("snnsData")
laser <- snnsData$laser_1000.pat
head(laser)
inputs <- laser[,inputColumns(laser)] # Extracts all columns from a matrix whose column names begin with "in"
targets <- laser[,outputColumns(laser)] # Extracts all columns from a matrix whose column names begin with "out"
inputs
targets
patterns <- splitForTrainingAndTest(inputs, targets, ratio = 0.15)
# Plot the data
plot(c(0,100),c(0,0.8),type = "n",xlab = "Index", ylab = "Values",main = "Data")
lines(inputs[1:100],col="black",lwd=2.5) # Plot Data 1
lines(targets[1:100],col="blue",lwd=2.5) # Plot Data 2
legend(0.0,0.8, # places a legend at the appropriate place
c("inputs","targets"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),col=c("black","blue")) # gives the legend lines the correct color and width
model <- elman(patterns$inputsTrain, patterns$targetsTrain,
size = c(8, 8), learnFuncParams = c(0.1), maxit = 500,
inputsTest = patterns$inputsTest, targetsTest = patterns$targetsTest,
linOut = FALSE)
plot(c(0,100),c(0,0.9),type = "n",xlab = "Index", ylab = "Values",main = "Data")
lines(inputs[1:100],col="black",lwd=2.5) # Plot Data 1 - Train
lines(targets[1:100],col="blue",lwd=2.5) # Plot Data 2 - Targets
lines(model$fitted.values[1:100], col = "red",lwd=2.5)  # Plot Data 3 predicted
legend(2.5,0.9, # places a legend at the appropriate place
c("inputs","targets","modeled"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),col=c("black","blue","red")) # gives the legend lines the correct color and width
plot(c(0,150),c(0,0.9),type = "n",xlab = "Index", ylab = "Values",main = "Data")
# lines(inputs[1:100],col="black",lwd=2.5) # Plot Data 1 - Train
lines(targets[851:1000],col="blue",lwd=2.5) # Plot Data 2 - Targets
lines(model$fittedTestValues, col = "red",lwd=2.5)  # Plot Data 3 predicted
legend(2.5,0.9, # places a legend at the appropriate place
c("Test targets","Test modeled"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),col=c("blue","red")) # gives the legend lines the correct color and width
plotRegressionError(patterns$targetsTrain, model$fitted.values)
# Regression plot for the test data.
plotRegressionError(patterns$targetsTest, model$fittedTestValues)
library("RSNNS")
# demo() # See all the demos in R
# Load the Data (more data @  http://sci2s.ugr.es/keel/datasets.php)
data("snnsData")
laser <- snnsData$laser_1000.pat
head
head(laser)
# Spliting the Data
inputs <- laser[,inputColumns(laser)] # Extracts all columns from a matrix whose column names begin with "in"
targets <- laser[,outputColumns(laser)] # Extracts all columns from a matrix whose column names begin with "out"
# Split the input data (1000) into train (850) and test (150) specified by the argument ratio=0.15
patterns <- splitForTrainingAndTest(inputs, targets, ratio = 0.15)
# Plot the data
plot(c(0,100),c(0,0.8),type = "n",xlab = "Index", ylab = "Values",main = "Data")
lines(inputs[1:100],col="black",lwd=2.5) # Plot Data 1
lines(targets[1:100],col="blue",lwd=2.5) # Plot Data 2
legend(0.0,0.8, # places a legend at the appropriate place
c("inputs","targets"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),col=c("black","blue")) # gives the legend lines the correct color and width
model <- elman(patterns$inputsTrain, patterns$targetsTrain,
size = c(8, 8), learnFuncParams = c(0.1), maxit = 500,
inputsTest = patterns$inputsTest, targetsTest = patterns$targetsTest,
linOut = FALSE)
plot(c(0,100),c(0,0.9),type = "n",xlab = "Index", ylab = "Values",main = "Data")
lines(inputs[1:100],col="black",lwd=2.5) # Plot Data 1 - Train
lines(targets[1:100],col="blue",lwd=2.5) # Plot Data 2 - Targets
lines(model$fitted.values[1:100], col = "red",lwd=2.5)  # Plot Data 3 predicted
legend(2.5,0.9, # places a legend at the appropriate place
c("inputs","targets","modeled"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),col=c("black","blue","red")) # gives the legend lines the correct color and width
plot(c(0,150),c(0,0.9),type = "n",xlab = "Index", ylab = "Values",main = "Data")
# lines(inputs[1:100],col="black",lwd=2.5) # Plot Data 1 - Train
lines(targets[851:1000],col="blue",lwd=2.5) # Plot Data 2 - Targets
lines(model$fittedTestValues, col = "red",lwd=2.5)  # Plot Data 3 predicted
legend(2.5,0.9, # places a legend at the appropriate place
c("Test targets","Test modeled"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),col=c("blue","red")) # gives the legend lines the correct color and width
# Regression plot for the training data, showing an optimal linear fit (black), and linear fit to the training data (red).
plotRegressionError(patterns$targetsTrain, model$fitted.values)
# Regression plot for the test data.
plotRegressionError(patterns$targetsTest, model$fittedTestValues)
