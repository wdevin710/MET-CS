(Yp-Y )^2
sum( (Yp-Y )^2 )
max(Y)
max(Yp)
which(is.na(Yp))
Yp[1:5]
Yp[1:5]
Y <- InputData[[2]][-1]; Yp <- InputData[[3]][-1]
R2 <- 1 - sum( (Yp-Y )^2 ) / sum( (Y-mean(Y) )^2 ) # Coeff of determination (R-squared)
Title <- paste0(Title,"; R Squared:",round(R2,2))
Title
library(plotly)
PlotData <- data.frame(x=Output$TimeStamp,
y1=InputData$Electric.Demand..kW.,
y2=unlist(Output$Predicted.Electric.Demand))
p <- plot_ly(PlotData, x=~x, y=~y1, name = 'Actual Electric Demand (kW)', type = 'scatter', mode = 'lines')
p <- add_trace(p,y=~y2, name = 'RNN Forecasted Demand (kWh)', mode = 'lines', symbol = I(1), marker = list(size = 5)) # add another line
p <- p %>% layout(title = Title,
xaxis = list(title = 'Date',
zeroline = TRUE),
yaxis = list(title = 'Electric Demand (kW)',
range = c(0,max(InputData$Electric.Demand..kW.))))
library(plotly)
PlotData <- data.frame(x=TimeStamp,
y1=InputData[[2]],
y2=InputData[[3]])
p <- plot_ly(PlotData, x=~x, y=~y1, name = 'Actual Electric Demand (kW)', type = 'scatter', mode = 'lines')
p <- add_trace(p,y=~y2, name = 'RNN Forecasted Demand (kWh)', mode = 'lines', symbol = I(1), marker = list(size = 5)) # add another line
p <- p %>% layout(title = Title,
xaxis = list(title = 'Date',
zeroline = TRUE),
yaxis = list(title = 'Electric Demand (kW)',
range = c(0,max(InputData$Electric.Demand..kW.))))
p # To Plot type "p" in console
Title
rm(list=ls()); cat("\014") # clear all
library("RSNNS")
# source("Forecast_kWh_Demand.R") # This is one way how the modified Student code should look like
# source("Forecast_kWh_Demand_Test.R") # This is the Student version of the code
# Read Data from Student CSV result downloaded from the cloud
Path.2.Files <- file.path("Data","FCX-Chart.csv") # Path to CSV File
InputData <- read.csv(Path.2.Files,stringsAsFactors = FALSE,
blank.lines.skip = TRUE,header=T) # Read CSV File
InputData
names(InputData)
Percent.To.Test <- 0.30
Range.to.Plot <- seq(from = round(dim(InputData)[1]*(1-Percent.To.Test)), to = dim(InputData)[1])
TimeStamp <- strptime(InputData[[1]],"%Y-%m-%d %H:%M:%S")
rm(list=ls()); cat("\014") # clear all
library("RSNNS")
# source("Forecast_kWh_Demand.R") # This is one way how the modified Student code should look like
source("Forecast_kWh_Demand_Test.R") # This is the Student version of the code
# Read Data from CSV
Path.2.Files <- file.path("Data","OficeBuildingData.csv") # Path to CSV File
InputData <- read.csv(Path.2.Files,stringsAsFactors = FALSE,
blank.lines.skip = TRUE,header=T) # Read CSV File
# Call Forecast Function to Train NN & Obtain Predictions
Output <- Forecast.Electric.Demand(InputData)
names(InputData <- read.csv(Path.2.Files,stringsAsFactors = FALSE,
)
)
rm(list=ls()); cat("\014") # clear all
library("RSNNS")
# source("Forecast_kWh_Demand.R") # This is one way how the modified Student code should look like
source("Project Functions.R") # This is the Student version of the code
# Read Data from CSV
Path.2.Files <- file.path("Data","OficeBuildingData.csv") # Path to CSV File
InputData <- read.csv(Path.2.Files,stringsAsFactors = FALSE,
blank.lines.skip = TRUE,header=T) # Read CSV File
Output <- Forecast.Electric.Demand(InputData)
head(Output)
Percent.To.Test <- 0.30
Range.to.Plot <- seq(from = round(dim(InputData)[1]*(1-Percent.To.Test)), to = dim(InputData)[1])
TimeStamp <- strptime(InputData[[1]],"%Y-%m-%d %H:%M:%S")
Title <- "NN Trained to Model Office building Energy Consumption based on Temperature, Humidity and Dewpoint"
Title <- paste(Title,paste0("(Train End Date is ", TimeStamp[Range.to.Plot[1]]),")")
# ### ====== Claculate Residuals ====
# Y <- InputData$Electric.Demand..kW.; Yp <- unlist(Output$Predicted.Electric.Demand)
Y <- InputData[[2]][-1]; Yp <- InputData[[3]][-1]
R2 <- 1 - sum( (Yp-Y )^2 ) / sum( (Y-mean(Y) )^2 ) # Coeff of determination (R-squared)
Title <- paste0(Title,"; R Squared:",round(R2,2))
# ### ====== Plot Results ====
library(plotly)
PlotData <- data.frame(x=TimeStamp,
y1=InputData[[2]],
y2=InputData[[3]])
p <- plot_ly(PlotData, x=~x, y=~y1, name = 'Actual Electric Demand (kW)', type = 'scatter', mode = 'lines')
p <- add_trace(p,y=~y2, name = 'RNN Forecasted Demand (kWh)', mode = 'lines', symbol = I(1), marker = list(size = 5)) # add another line
p <- p %>% layout(title = Title,
xaxis = list(title = 'Date',
zeroline = TRUE),
yaxis = list(title = 'Electric Demand (kW)',
range = c(0,max(InputData$Electric.Demand..kW.))))
p
debugSource('C:/Users/ZlatkoFCX/Desktop/IIoT Lab/IIoT_Script.R')
Forecast.Electric.Demand(InputData)
Time.Stamp
Num.Data.Points
Time.Stamp <- strptime(Raw_Data$DATE,"%Y-%m-%dT%H:%M")
Time.Stamp
rm(list=ls()); cat("\014") # clear all
library("RSNNS")
# source("Forecast_kWh_Demand.R") # This is one way how the modified Student code should look like
source("Project Functions.R") # This is the Student version of the code
# Read Data from CSV
Path.2.Files <- file.path("Data","OficeBuildingData.csv") # Path to CSV File
InputData <- read.csv(Path.2.Files,stringsAsFactors = FALSE,
blank.lines.skip = TRUE,header=T) # Read CSV File
# Call Forecast Function to Train NN & Obtain Predictions
Output <- Forecast.Electric.Demand(InputData)
# Plot Results
# Range.to.Plot <- seq(from = round(dim(InputData)[1]*(1-Output$Percent.To.Test)), to = dim(InputData)[1])
Percent.To.Test <- 0.30
Range.to.Plot <- seq(from = round(dim(InputData)[1]*(1-Percent.To.Test)), to = dim(InputData)[1])
TimeStamp <- strptime(InputData[[1]],"%Y-%m-%d %H:%M:%S")
Title <- "NN Trained to Model Office building Energy Consumption based on Temperature, Humidity and Dewpoint"
Title <- paste(Title,paste0("(Train End Date is ", TimeStamp[Range.to.Plot[1]]),")")
# ### ====== Claculate Residuals ====
# Y <- InputData$Electric.Demand..kW.; Yp <- unlist(Output$Predicted.Electric.Demand)
Y <- InputData[[2]][-1]; Yp <- InputData[[3]][-1]
R2 <- 1 - sum( (Yp-Y )^2 ) / sum( (Y-mean(Y) )^2 ) # Coeff of determination (R-squared)
Title <- paste0(Title,"; R Squared:",round(R2,2))
# ### ====== Plot Results ====
library(plotly)
PlotData <- data.frame(x=TimeStamp,
y1=InputData[[2]],
y2=InputData[[3]])
p <- plot_ly(PlotData, x=~x, y=~y1, name = 'Actual Electric Demand (kW)', type = 'scatter', mode = 'lines')
p <- add_trace(p,y=~y2, name = 'RNN Forecasted Demand (kWh)', mode = 'lines', symbol = I(1), marker = list(size = 5)) # add another line
p <- p %>% layout(title = Title,
xaxis = list(title = 'Date',
zeroline = TRUE),
yaxis = list(title = 'Electric Demand (kW)',
range = c(0,max(InputData$Electric.Demand..kW.))))
p # To Plot type "p" in console
head
head(InputData)
rm(list=ls()); cat("\014") # clear all
library("RSNNS")
source("Project Functions.R") # This is the Student version of the code
# Read Data from CSV
Path.2.Files <- file.path("Data","OficeBuildingData.csv") # Path to CSV File
InputData <- read.csv(Path.2.Files,stringsAsFactors = FALSE,
blank.lines.skip = TRUE,header=T) # Read CSV File
# Call Forecast Function to Train NN & Obtain Predictions
Output <- Forecast.Electric.Demand(InputData)
# Plot Results
# Range.to.Plot <- seq(from = round(dim(InputData)[1]*(1-Output$Percent.To.Test)), to = dim(InputData)[1])
Percent.To.Test <- 0.30
Range.to.Plot <- seq(from = round(dim(InputData)[1]*(1-Percent.To.Test)), to = dim(InputData)[1])
TimeStamp <- strptime(InputData[[1]],"%Y-%m-%d %H:%M:%S")
Title <- "NN Trained to Model Office building Energy Consumption based on Temperature, Humidity and Dewpoint"
Title <- paste(Title,paste0("(Train End Date is ", TimeStamp[Range.to.Plot[1]]),")")
# ### ====== Claculate Residuals ====
# Y <- InputData$Electric.Demand..kW.; Yp <- unlist(Output$Predicted.Electric.Demand)
Y <- InputData[[2]][-1]; Yp <- InputData[[3]][-1]
R2 <- 1 - sum( (Yp-Y )^2 ) / sum( (Y-mean(Y) )^2 ) # Coeff of determination (R-squared)
Title <- paste0(Title,"; R Squared:",round(R2,2))
# ### ====== Plot Results ====
library(plotly)
PlotData <- data.frame(x=TimeStamp,
y1=InputData[[2]],
y2=InputData[[3]])
p <- plot_ly(PlotData, x=~x, y=~y1, name = 'Actual Electric Demand (kW)', type = 'scatter', mode = 'lines')
p <- add_trace(p,y=~y2, name = 'RNN Forecasted Demand (kWh)', mode = 'lines', symbol = I(1), marker = list(size = 5)) # add another line
p <- p %>% layout(title = Title,
xaxis = list(title = 'Date',
zeroline = TRUE),
yaxis = list(title = 'Electric Demand (kW)',
range = c(0,max(InputData$Electric.Demand..kW.))))
p # To Plot type "p" in console
source('C:/Users/ZlatkoFCX/Desktop/IIoT Lab/IIoT_Script.R')
p
head(Output)
head(Output)
head(InputData)
debugSource('C:/Users/ZlatkoFCX/Desktop/IIoT Lab/IIoT_Script.R')
source('C:/Users/ZlatkoFCX/Desktop/IIoT Lab/IIoT_Script.R')
p # To Plot type "p" in console
p
Title
debugSource('C:/Users/ZlatkoFCX/Desktop/IIoT Lab/IIoT_Script.R')
TrainRange
head(TrainRange)
tail(TrainRange)
head(Time.Stamp)
head(Time.Stamp)
head(targets)
head(Predicted.Electric.Demand)
dim(Predicted.Electric.Demand)
Predicted.Electric.Demand[1][1:5]
Predicted.Electric.Demand[[1]][1:3]
source('C:/Users/ZlatkoFCX/Desktop/IIoT Lab/IIoT_Script.R')
p
source('~/My Files/Teachng/2018/Summer/Classroom/Class 9/IoT Code/IIoT Lab/IIoT_Run.R')
p
Title
source("D:/Teachng/2021/Fall/Class 11  IoT & NFT/IoT/IoT Code/IIoT Assignment/IIoT_Run.R")
debugSource("D:/Teachng/2021/Fall/Class 11  IoT & NFT/IoT/IoT Code/IIoT Assignment/IIoT_Run.R")
p
Title
source("D:/Teachng/2021/Fall/Class 11  IoT & NFT/IoT/IoT Code/IIoT Assignment/IIoT_Run.R")
Title
p
# RSNNS Energy Consumption Forecast
rm(list=ls()); cat("\014") # clear all
library("RSNNS")
source("Project Functions.R") # This is the Lab version of the code
# Read Data from CSV
Path.2.Files <- file.path("Data","OficeBuildingData.csv") # Path to CSV File
InputData <- read.csv(Path.2.Files,stringsAsFactors = FALSE,
blank.lines.skip = TRUE,header=T) # Read CSV File
View(InputData)
Forecast.Electric.Demand <- function (Raw_Data)
{
print("2. Inputs sent to function: Forecast.Electric.Demand()")
# Extract Time Stemps from Data
Num.Data.Points <- dim(Raw_Data)[1]
Time.Stamp <- strptime(Raw_Data$DATE,"%m/%d/%Y %H:%M")
# Select Training Range
StartTime <- 1 # which(Time.Stamp=="2014-03-01 01:00:00 EST")
TrainRange <- StartTime:Num.Data.Points
print(paste0("Training data start date: ",Time.Stamp[StartTime]))
# Extract Hours field from Time.Stamp
# Insert your code here
Hours <- as.numeric(format(Time.Stamp,'%H'))
# Extract Days field from Time.Stamp
# Insert your code here
Day.Date <- as.numeric(format(Time.Stamp,'%d'))
Day.Number <- as.numeric(format(Time.Stamp,'%w'));
Day.Number[Day.Number==0]=7
Day.Name <- weekdays(Time.Stamp)
# Modify Hours & Days
temp <- 12 - Hours; temp[temp >=0]=0
Hours.Modified <- Hours +2 *temp
Day.Number.Modified <- Day.Number
Day.Number.Modified[Day.Number <6]=1;
Day.Number.Modified[Day.Number ==6]=2;
Day.Number.Modified[Day.Number >6]=3;
# Insert your code here
print("Extracting Hour_of_Day & Day_of_Week fields from the DATE field Time Stamp ")
# Choose Data to Process
Dependent.Ix <- c(2:4) # Select dependent columns
Dependent.Data <- cbind(Hours.Modified, Day.Number.Modified, Raw_Data[TrainRange,Dependent.Ix]); # X ()
Independent.Ix <- c(5) # Select Independent columns
Independent.Data <- Raw_Data[TrainRange,Independent.Ix]; # Y (Actual Electric Demand )
print("Dependent data tags: ");  print(names(Dependent.Data))
print("Independent data tags: ");  print(names(Raw_Data[Independent.Ix]))
# Get inputs & targets from the Data
inputs <- Dependent.Data # Actual Consumption - used for training
targets <- Independent.Data # Expected Consumption (Regression data) used as Tags
Percent.To.Test <- 0.30 # Split the input data into train and test
print("Define NuNet Inputs: "); print(paste0("Percent of input data to test: ", 100*Percent.To.Test, " %"))
# Train NuNet & Get Predictions
print("Train NuNet & Get Predictions, please wait... ");
Predicted.Electric.Demand <- TrainNuNet(inputs,targets,Percent.To.Test)
print("NuNet Training finished!");
Output <- list("TimeStamp"=Time.Stamp,"inputs"=inputs,
"targets"=targets,
Predicted.Electric.Demand=Predicted.Electric.Demand,
Percent.To.Test=Percent.To.Test)
return (Output) # Returned object
}
TrainNuNet <- function (inputs,targets,Percent.To.Test)
{
# Normalize the Data
if (is.null(dim(inputs))) # Single Column Input
{
z <- max(inputs, na.rm=TRUE) # find Max in Single Input Column
inputs.scale <- z; targets.scale <- max(targets, na.rm=TRUE)
inputs.normalized <- inputs/inputs.scale # Normalize Data
targets.normalized <- targets/targets.scale # Normalize Data
}
else # Multi Colum Input
{
z <- apply(inputs, MARGIN = 2, function(x) max(x, na.rm=TRUE)) # find Max in Each Input Column
inputs.scale <- as.vector(z); targets.scale <- max(targets, na.rm=TRUE);
inputs.normalized <- sweep(inputs, 2, inputs.scale, `/`) # Normalize Data
targets.normalized <- targets/targets.scale # Normalize Data
}
# Split the Data into Train and Test
patterns <- splitForTrainingAndTest(inputs.normalized, targets.normalized, ratio = Percent.To.Test)
set.seed(13);
# Train NN to folow Actual
# The use of an Elman network (Elman 1990) for time series regression.
# model <- elman(patterns$inputsTrain, patterns$targetsTrain,
#                size = c(10, 10), learnFuncParams = c(0.1), maxit = 1300,
#                inputsTest = patterns$inputsTest, targetsTest = patterns$targetsTest,
#                linOut = FALSE)
model <- elman(patterns$inputsTrain, patterns$targetsTrain,
size = c(8, 8), learnFuncParams = c(0.1), maxit = 500,
inputsTest = patterns$inputsTest, targetsTest = patterns$targetsTest,
linOut = FALSE)
NN.fitted.Train <- model$fitted.values*targets.scale
NN.fitted.Test <- model$fittedTestValues*targets.scale
Predicted.Electric.Demand <- c(NN.fitted.Train,NN.fitted.Test)
result <- list(Predicted.Electric.Demand)
return (result) # Returned object
}
# RSNNS Energy Consumption Forecast
rm(list=ls()); cat("\014") # clear all
library("RSNNS")
source("Project Functions.R") # This is the Lab version of the code
# Read Data from CSV
Path.2.Files <- file.path("Data","OficeBuildingData.csv") # Path to CSV File
InputData <- read.csv(Path.2.Files,stringsAsFactors = FALSE,
blank.lines.skip = TRUE,header=T) # Read CSV File
# Call Forecast Function to Train NN & Obtain Predictions
Output <- Forecast.Electric.Demand(InputData)
# Plot Results
Range.to.Plot <- seq(from = round(dim(InputData)[1]*(1-Output$Percent.To.Test)), to = dim(InputData)[1])
Title <- "NN Trained to Model Office building Energy Consumption based on Temperature, Humidity and Dewpoint"
Title <- paste(Title,paste0("(Train End Date is ", Output$TimeStamp[Range.to.Plot[1]]),")")
# ### ====== Claculate Residuals ====
Y <- InputData$Electric.Demand..kW.; Yp <- unlist(Output$Predicted.Electric.Demand)
R2 <- 1 - sum( (Yp-Y )^2 ) / sum( (Y-mean(Y) )^2 ) # Coeff of determination (R-squared)
Title <- paste0(Title,"; R Squared:",round(R2,2))
# ### ====== Plot Results ====
library(plotly)
PlotData <- data.frame(x=Output$TimeStamp,
y1=InputData$Electric.Demand..kW.,
y2=unlist(Output$Predicted.Electric.Demand))
p <- plot_ly(PlotData, x=~x, y=~y1, name = 'Actual Electric Demand (kW)', type = 'scatter', mode = 'lines')
p <- add_trace(p,y=~y2, name = 'RNN Forecasted Demand (kWh)', mode = 'lines', symbol = I(1), marker = list(size = 5)) # add another line
p <- p %>% layout(title = Title,
xaxis = list(title = 'Date',
zeroline = TRUE),
yaxis = list(title = 'Electric Demand (kW)',
range = c(0,max(InputData$Electric.Demand..kW.))))
p # To Plot type "p" in console
View(InputData)
Path.2.Files <- file.path("Data","OficeBuildingData.csv") # Path to CSV File
InputData <- read.csv(Path.2.Files,stringsAsFactors = FALSE,
blank.lines.skip = TRUE,header=T) # Read CSV File
Num.Data.Points <- dim(Raw_Data)[1]
Num.Data.Points <- dim(InputData)[1]
Num.Data.Points
Time.Stamp <- strptime(InputData$DATE,"%m/%d/%Y %H:%M")
Time.Stamp
Hours <- as.numeric(format(Time.Stamp,'%H'))
Hours
temp <- 12 - Hours; temp[temp >=0]=0
Hours.Modified <- Hours +2 *temp
Hours.Modified
Dependent.Ix <- c(2:4)
1 <- InputData[TrainRange,Dependent.Ix]
TrainRange <- 1:10100
1 <- InputData[TrainRange,Dependent.Ix]
Raw_Data <- read.csv(Path.2.Files,stringsAsFactors = FALSE,
blank.lines.skip = TRUE,header=T) # Read CSV File
Num.Data.Points <- dim(Raw_Data)[1]
Time.Stamp <- strptime(Raw_Data$DATE,"%m/%d/%Y %H:%M")
# Select Training Range
StartTime <- 1 # which(Time.Stamp=="2014-03-01 01:00:00 EST")
TrainRange <- StartTime:Num.Data.Points
print(paste0("Training data start date: ",Time.Stamp[StartTime]))
# Extract Hours field from Time.Stamp
# Insert your code here
Hours <- as.numeric(format(Time.Stamp,'%H'))
# Extract Days field from Time.Stamp
# Insert your code here
Day.Date <- as.numeric(format(Time.Stamp,'%d'))
Day.Number <- as.numeric(format(Time.Stamp,'%w'));
Day.Number[Day.Number==0]=7
Day.Name <- weekdays(Time.Stamp)
# Modify Hours & Days
temp <- 12 - Hours; temp[temp >=0]=0
Hours.Modified <- Hours +2 *temp
Day.Number.Modified <- Day.Number
Day.Number.Modified[Day.Number <6]=1;
Day.Number.Modified[Day.Number ==6]=2;
Day.Number.Modified[Day.Number >6]=3;
print("Extracting Hour_of_Day & Day_of_Week fields from the DATE field Time Stamp ")
# Choose Data to Process
Dependent.Ix <- c(2:4) # Select dependent columns
Dependent.Data <- cbind(Hours.Modified, Day.Number.Modified, Raw_Data[TrainRange,Dependent.Ix]); # X ()
View(Dependent.Data)
# Get inputs & targets from the Data
inputs <- Dependent.Data # Actual Consumption - used for training
# RSNNS Energy Consumption Forecast
rm(list=ls()); cat("\014") # clear all
library("RSNNS")
source("Project Functions.R") # This is the Lab version of the code
# Read Data from CSV
Path.2.Files <- file.path("Data","OficeBuildingData.csv") # Path to CSV File
InputData <- read.csv(Path.2.Files,stringsAsFactors = FALSE,
blank.lines.skip = TRUE,header=T) # Read CSV File
# Call Forecast Function to Train NN & Obtain Predictions
Output <- Forecast.Electric.Demand(InputData)
# Plot Results
Range.to.Plot <- seq(from = round(dim(InputData)[1]*(1-Output$Percent.To.Test)), to = dim(InputData)[1])
Title <- "NN Trained to Model Office building Energy Consumption based on Temperature, Humidity and Dewpoint"
Title <- paste(Title,paste0("(Train End Date is ", Output$TimeStamp[Range.to.Plot[1]]),")")
# ### ====== Claculate Residuals ====
Y <- InputData$Electric.Demand..kW.; Yp <- unlist(Output$Predicted.Electric.Demand)
R2 <- 1 - sum( (Yp-Y )^2 ) / sum( (Y-mean(Y) )^2 ) # Coeff of determination (R-squared)
Title <- paste0(Title,"; R Squared:",round(R2,2))
# ### ====== Plot Results ====
library(plotly)
PlotData <- data.frame(x=Output$TimeStamp,
y1=InputData$Electric.Demand..kW.,
y2=unlist(Output$Predicted.Electric.Demand))
p <- plot_ly(PlotData, x=~x, y=~y1, name = 'Actual Electric Demand (kW)', type = 'scatter', mode = 'lines')
p <- add_trace(p,y=~y2, name = 'RNN Forecasted Demand (kWh)', mode = 'lines', symbol = I(1), marker = list(size = 5)) # add another line
p <- p %>% layout(title = Title,
xaxis = list(title = 'Date',
zeroline = TRUE),
yaxis = list(title = 'Electric Demand (kW)',
range = c(0,max(InputData$Electric.Demand..kW.))))
p # To Plot type "p" in console
library(prob)
dice <- rolldie(2,6)
dice
dicetotal <- rowSums(dice[c("X1","X2")])
dice4 <- dice[dicetotal =4,]
dicetotal <- rowSums(dice[c("X1","X2")])
dice4 <- dice[dicetotal =4,]
dice4 <- dice[dicetotal ==4,]
View(dice4)
dice4 <- dice[dicetotal ==4 |,]
dice4 <- dice[dicetotal ==4 |dicetotal <4,]
View(dice4)
View(dice)
dice <- rolldie(3,6)
dice3 <- dice[dice$X1 >3 & dice$X2 >3 &dice$X3 >3,]
dice3
View(dice3)
dice <- rolldie(2,6)
dicetotal <- rowSums(dice[c("X1","X2")])
dicetotal
dice6 <- dice[dicetotal >= 6,]
View(dice6)
dice <- rolldie(2,22)
View(dice)
dice2 <- dice[dice$X1 ==dice$X2,]
dice <- rolldie(2,6)
dice2 <- dice[dice$X1 ==dice$X2,]
View(dice2)
View(dice2)
dicetotal <- rowSums(dice[c("X1","X2")])
dicetotal
dice <- rolldie(2,6)
dicetotal <- rowSums(dice[c("X1","X2")])
dicetotal
dice2 <- dice[dicetotal<5 |dicetotal ==5,]
dice2 <- dice[dicetotal> 7 |dicetotal ==7,]
dice2
View(dice2)
dice2 <- dice[dicetotal/2 == 0,]
dicetotal/2
dicetotal
dice2 <- dice[dicetotal/2 == 0,]
dice2 <- dice[dicetota%%2 == 1,]
dice2 <- dice[dicetotal%%2 == 1,]
dice2
dice7 <- dice[dicetotal >7 |dicetotal ==7,]
dice2 <- dice[dicetotal%%2 == 1,]
dice2 <- dice[dicetotal%%2 == 1,]
dice2
dicetotal <- rowSums(dice2[c("X1","X2")])
dicetotal
dice7 <- dice[dicetotal >7 |dicetotal ==7,]
dicetotal <- rowSums(dice2[c("X1","X2")])
dicetotal
dice7 <- dice2[dicetotal >7 |dicetotal ==7,]
dice2 <- dice[dicetotal%%2 == 1,]
View(dice7)
dice7 <- dice[dicetotal >7 |dicetotal ==7,]
dice2 <- dice[dicetotal%%2 == 1,]
dice2
dicetotal <- rowSums(dice[c("X1","X2")])
dicetotal
dice2 <- dice[dicetotal%%2 == 1,]
dice2
dice7 <- dice2[dicetotal >7 |dicetotal ==7,]
View(dice2)
View(dice2)
dicetotal <- rowSums(dice2[c("X1","X2")])
dicetotal
dice7 <- dice2[dicetotal >7 |dicetotal ==7,]
library(prob)
dice <- rolldie(2,6)
dicetotal <- rowSums(dice[c("X1","X2")])
dicetotal
dice2 <- dice[dicetotal%%2 == 0,]
dice2
dicetotale <- rowSums(dice2[c("X1","X2")])
dice3 <- dice[dicetotale <4 |dicetotale ==4,]
View(dice3)
View(dice2)
dice3 <- dice[dicetotale < 4 &dicetotale ==4,]
dice3 <- dice[dicetotale < 4 |dicetotale ==4,]
View(dice3)
View(dice3)
dicetotale
dice3 <- dice[dicetotale < 4 |dicetotale ==4,]
dice3
dice3 <- dice[dicetotale < 4 | dicetotale ==4,]
dice3
dice3 <- dice[dicetotale <= 4 ,]
dice3
dice3 <- dice2[dicetotale <= 4 ,]
dice3
dicethree <- rolldie(3,6)
diceth <- dicethree[X1 >3 &X2>3&X3>3,]
diceth <- dicethree[dicethree$X1 >3 &dicethree$X2>3&dicethree$X3>3,]
diceth
dice6 <- dice[dicetotal >=6,]
dice2 <- dice[dicetotal%%2 == 1,]
dice2
library(tm)
library(SnowballC)
